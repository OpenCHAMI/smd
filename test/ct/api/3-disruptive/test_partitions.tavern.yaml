# MIT License
#
# (C) Copyright [2019-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) partitions API.
# Author: Mitch Schooler
# Service: Hardware State Manager

# HMS test metrics test cases: 38
# POST /partitions partition1 API response code
# GET /partitions/{partition1} API response code
# GET /partitions/{partition1} API response body
# GET /partitions?partition=<partition1> API response code
# GET /partitions?partition=<partition1> API response body
# GET /partitions?tag=<tag1> API response code
# GET /partitions?tag=<tag1> API response body
# GET /partitions?tag=<tag2> API response code
# GET /partitions?tag=<tag2> API response body
# PATCH /partitions/{partition} invalid partition API response code
# PATCH /partitions/{partition} invalid partition API response body
# PATCH /partitions/{partition1} API response code
# GET /partitions/{partition1} updated description tag API response code
# GET /partitions/{partition1} updated description tag API response body
# POST /partitions partition2 API response code
# GET /partitions/{partition2} API response code
# GET /partitions/{partition2} API response body
# GET /partitions/names test partitions present API response code
# GET /partitions/names test partitions present API response body
# GET /partitions/{partition1}/members API response code
# GET /partitions/{partition1}/members API response body
# POST /partitions/{partition1}/members API response code
# GET /partitions/{partition1}/members new member API response code
# GET /partitions/{partition1}/members new member API response body
# DELETE /partitions/{partition1}/members/{xname} API response code
# DELETE /partitions/{partition1}/members/{xname} API response body
# GET /partitions/{partition1}/members deleted member API response code
# GET /partitions/{partition1}/members deleted member API response body
# DELETE /partitions/{partition1}/members/{xname} non-present member API response code
# DELETE /partitions/{partition1}/members/{xname} non-present member API response body
# DELETE /partitions/{partition1} API response code
# DELETE /partitions/{partition1} API response body
# DELETE /partitions/{partition2} API response code
# DELETE /partitions/{partition2} API response body
# GET /partitions/names non-present test partitions API response code
# GET /partitions/names non-present test partitions API response body
# POST /partitions/{partition}/members non-present partition API response code
# POST /partitions/{partition}/members non-present partition API response body
---
test_name: Verify POST, GET, PATCH, and DELETE methods for various /partitions APIs

stages:
  - name: Get access token
    request:
      url: "{opaal_base_url}/token"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          access_token: access_token
  - name: Get four Node xnames from the HSM Components collection to use in upcoming stages
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      save:
        json:
          xname1: Components[0].ID
          xname2: Components[1].ID
          xname3: Components[2].ID
          xname4: Components[3].ID

  - name: Delete existing test partition1 in HSM (if present) to prevent conflict
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"

  # POST /partitions partition1 API response code
  - name: Verify /partitions POST method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions"
      json: {"name":"p98","description":"Test partition 1 for HSM API testing in CT framework.","tags":["p98_tag1","p98_tag2"],"members":{"ids":["{xname1}","{xname2}"]}}
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 201

  # GET /partitions/{partition1} API response code
  # GET /partitions/{partition1} API response body
  - name: Verify /partitions/partition GET method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              name:
                type: str
                required: True
                enum:
                  - "p98"
              description:
                type: str
                required: True
                enum:
                  - "Test partition 1 for HSM API testing in CT framework."
              tags:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    required: True
                    enum:
                      - "p98_tag1"
                      - "p98_tag2"
              members:
                type: map
                required: True
                mapping:
                  ids:
                    type: seq
                    required: True
                    matching: all
                    sequence:
                      - type: str
                        required: True
                        enum:
                          - "{xname1}"
                          - "{xname2}"

  # GET /partitions?partition=<partition1> API response code
  # GET /partitions?partition=<partition1> API response body
  - name: Verify /partitions GET method with partition parameter
    request:
      url: "{hsm_base_url}/hsm/v2/partitions?partition=p98"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      save:
        json:
          name: "[0].name"
          description: "[0].description"
          tag1: "[0].tags[0]"
          tag2: "[0].tags[1]"
          member1: "[0].members.ids[0]"
          member2: "[0].members.ids[1]"

  # GET /partitions?tag=<tag1> API response code
  # GET /partitions?tag=<tag1> API response body
  - name: Verify /partitions GET method with tag parameter (1)
    request:
      url: "{hsm_base_url}/hsm/v2/partitions?tag=p98_tag1"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      save:
        json:
          name: "[0].name"
          description: "[0].description"
          tag1: "[0].tags[0]"
          tag2: "[0].tags[1]"
          member1: "[0].members.ids[0]"
          member2: "[0].members.ids[1]"

  # GET /partitions?tag=<tag2> API response code
  # GET /partitions?tag=<tag2> API response body
  - name: Verify /partitions GET method with tag parameter (2)
    request:
      url: "{hsm_base_url}/hsm/v2/partitions?tag=p98_tag2"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      save:
        json:
          name: "[0].name"
          description: "[0].description"
          tag1: "[0].tags[0]"
          tag2: "[0].tags[1]"
          member1: "[0].members.ids[0]"
          member2: "[0].members.ids[1]"

  # PATCH /partitions/{partition} invalid partition API response code
  # PATCH /partitions/{partition} invalid partition API response body
  - name: Verify /partitions/partition PATCH method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/FAKE"
      json: {"description":"Fake test partition for HSM API testing in CT framework.","tags":["FAKE_tag1","FAKE_tag2"]}
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "no such partition."
              status:
                type: int
                required: True
                enum:
                  - 404

  # PATCH /partitions/{partition1} API response code
  - name: Verify /partitions/partition PATCH method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98"
      json: {"description":"Test partition 1 for HSM API testing in CT framework (UPDATED).","tags":["p98_tag3","p98_tag4"]}
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 204

  # GET /partitions/{partition1} updated description tag API response code
  # GET /partitions/{partition1} updated description tag API response body
  - name: Verify /partitions/partition GET method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              name:
                type: str
                required: True
                enum:
                  - "p98"
              description:
                type: str
                required: True
                enum:
                  - "Test partition 1 for HSM API testing in CT framework (UPDATED)."
              tags:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    required: True
                    enum:
                      - "p98_tag3"
                      - "p98_tag4"
              members:
                type: map
                required: True
                mapping:
                  ids:
                    type: seq
                    required: True
                    matching: all
                    sequence:
                      - type: str
                        required: True
                        enum:
                          - "{xname1}"
                          - "{xname2}"

  - name: Delete existing test partition2 in HSM (if present) to prevent conflict
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p99"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"

  # POST /partitions partition2 API response code
  - name: Verify /partitions POST method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions"
      json: {"name":"p99","description":"Test partition 2 for HSM API testing in CT framework.","tags":["p99_tag1","p99_tag2"],"members":{"ids":["{xname3}"]}}
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 201

  # GET /partitions/{partition2} API response code
  # GET /partitions/{partition2} API response body
  - name: Verify /partitions/partition GET method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p99"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              name:
                type: str
                required: True
                enum:
                  - "p99"
              description:
                type: str
                required: True
                enum:
                  - "Test partition 2 for HSM API testing in CT framework."
              tags:
                type: seq
                required: True
                matching: all
                sequence:
                  - type: str
                    required: True
                    enum:
                      - "p99_tag1"
                      - "p99_tag2"
              members:
                type: map
                required: True
                mapping:
                  ids:
                    type: seq
                    required: True
                    matching: all
                    sequence:
                      - type: str
                        required: True
                        enum:
                          - "{xname3}"

  # GET /partitions/names test partitions present API response code
  # GET /partitions/names test partitions present API response body
  - name: Verify /partitions/names GET method test partitions present
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/names"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: seq
              required: True
              matching: all
              sequence:
                - type: str
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@)"
                operator: "gt"
                expected: 1
              - jmespath: "contains((@), 'p98')"
                operator: "eq"
                expected: True
              - jmespath: "contains((@), 'p99')"
                operator: "eq"
                expected: True

  # GET /partitions/{partition1}/members API response code
  # GET /partitions/{partition1}/members API response body
  - name: Verify /partitions/partition/members GET method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98/members"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                ids:
                  type: seq
                  required: True
                  matching: all
                  sequence:
                    - type: str
                      enum:
                        - "{xname1}"
                        - "{xname2}"
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(values(@)[0])"
                operator: "eq"
                expected: 2
              - jmespath: "contains(values(@)[0], '{xname1}')"
                operator: "eq"
                expected: True
              - jmespath: "contains(values(@)[0], '{xname2}')"
                operator: "eq"
                expected: True

  # POST /partitions/{partition1}/members API response code
  - name: Verify /partitions/partition/members POST method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98/members"
      json: {"id":"{xname4}"}
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 201

  # GET /partitions/{partition1}/members new member API response code
  # GET /partitions/{partition1}/members new member API response body
  - name: Verify /partitions/partition/members GET method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98/members"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                ids:
                  type: seq
                  required: True
                  matching: all
                  sequence:
                    - type: str
                      enum:
                        - "{xname1}"
                        - "{xname2}"
                        - "{xname4}"
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(values(@)[0])"
                operator: "eq"
                expected: 3
              - jmespath: "contains(values(@)[0], '{xname1}')"
                operator: "eq"
                expected: True
              - jmespath: "contains(values(@)[0], '{xname2}')"
                operator: "eq"
                expected: True
              - jmespath: "contains(values(@)[0], '{xname4}')"
                operator: "eq"
                expected: True

  # DELETE /partitions/{partition1}/members/{xname} API response code
  # DELETE /partitions/{partition1}/members/{xname} API response body
  - name: Verify /partitions/partition/members/xname DELETE method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98/members/{xname1}"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              code:
                type: int
                required: True
                enum:
                  - 0
              message:
                type: str
                required: True
                enum:
                  - "deleted 1 entry"

  # GET /partitions/{partition1}/members deleted member API response code
  # GET /partitions/{partition1}/members deleted member API response body
  - name: Verify /partitions/partition/members GET method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98/members"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                ids:
                  type: seq
                  required: True
                  matching: all
                  sequence:
                    - type: str
                      enum:
                        - "{xname2}"
                        - "{xname4}"
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(values(@)[0])"
                operator: "eq"
                expected: 2
              - jmespath: "contains(values(@)[0], '{xname1}')"
                operator: "eq"
                expected: False
              - jmespath: "contains(values(@)[0], '{xname2}')"
                operator: "eq"
                expected: True
              - jmespath: "contains(values(@)[0], '{xname4}')"
                operator: "eq"
                expected: True

  # DELETE /partitions/{partition1}/members/{xname} non-present member API response code
  # DELETE /partitions/{partition1}/members/{xname} non-present member API response body
  - name: Verify /partitions/partition/members/xname DELETE method non-present member
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98/members/FAKE"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # DELETE /partitions/{partition1} API response code
  # DELETE /partitions/{partition1} API response body
  - name: Verify /partitions/partition DELETE method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p98"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              code:
                type: int
                required: True
                enum:
                  - 0
              message:
                type: str
                required: True
                enum:
                  - "deleted 1 entry"

  # DELETE /partitions/{partition2} API response code
  # DELETE /partitions/{partition2} API response body
  - name: Verify /partitions/<partition> DELETE method
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p99"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              code:
                type: int
                required: True
                enum:
                  - 0
              message:
                type: str
                required: True
                enum:
                  - "deleted 1 entry"

  # GET /partitions/names non-present test partitions API response code
  # GET /partitions/names non-present test partitions API response body
  - name: Verify /partitions/names GET method non-present test partitions
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/names"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: seq
              required: True
              matching: all
              sequence:
                - type: str
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "contains((@), 'p98')"
                operator: "eq"
                expected: False
              - jmespath: "contains((@), 'p99')"
                operator: "eq"
                expected: False

  # POST /partitions/{partition}/members non-present partition API response code
  # POST /partitions/{partition}/members non-present partition API response body
  - name: Verify /partitions/partition/members POST method non-present partition
    request:
      url: "{hsm_base_url}/hsm/v2/partitions/p99/members"
      json: {"id":"{xname4}"}
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "No such partition: p99"
              status:
                type: int
                required: True
                enum:
                  - 404

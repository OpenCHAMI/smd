# MIT License
#
# (C) Copyright [2022] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) Components API
# Author: Mitch Schooler
# Service: Hardware State Manager

# HMS test metrics test cases: 96
# GET /State/Components?id={id} Invalid ID Parameter API response code
# GET /State/Components?id={id} Invalid ID Parameter API response body
# GET /State/Components?type={type} Invalid Type Parameter API response code
# GET /State/Components?type={type} Invalid Type Parameter API response body
# GET /State/Components?state={state} Invalid State Parameter API response code
# GET /State/Components?state={state} Invalid State Parameter API response body
# GET /State/Components?flag={flag} Invalid Flag Parameter API response code
# GET /State/Components?flag={flag} Invalid Flag Parameter API response body
# GET /State/Components?role={role} Invalid Role Parameter API response code
# GET /State/Components?role={role} Invalid Role Parameter API response body
# GET /State/Components?subrole={subrole} Invalid SubRole Parameter API response code
# GET /State/Components?subrole={subrole} Invalid SubRole Parameter API response body
# GET /State/Components?enabled={enabled} Invalid Enabled Parameter API response code
# GET /State/Components?enabled={enabled} Invalid Enabled Parameter API response body
# GET /State/Components?arch={arch} Invalid Arch Parameter API response code
# GET /State/Components?arch={arch} Invalid Arch Parameter API response body
# GET /State/Components?class={class} Invalid Class Parameter API response code
# GET /State/Components?class={class} Invalid Class Parameter API response body
# GET /State/Components?nid={nid} Invalid NID Parameter API response code
# GET /State/Components?nid={nid} Invalid NID Parameter API response body
# GET /State/Components?nid_start={nid_start} Invalid NID_Start Parameter API response code
# GET /State/Components?nid_start={nid_start} Invalid NID_Start Parameter API response body
# GET /State/Components?nid_end={nid_end} Invalid NID_End Parameter API response code
# GET /State/Components?nid_end={nid_end} Invalid NID_End Parameter API response body
# POST /State/Components Invalid CabinetPDUController API response code
# POST /State/Components Invalid CabinetPDUController API response body
# POST /State/Components Invalid Chassis API response code
# POST /State/Components Invalid Chassis API response body
# POST /State/Components Invalid ChassisBMC API response code
# POST /State/Components Invalid ChassisBMC API response body
# POST /State/Components Invalid HSNBoard API response code
# POST /State/Components Invalid HSNBoard API response body
# POST /State/Components Invalid Node API response code
# POST /State/Components Invalid Node API response body
# POST /State/Components Invalid NodeBMC API response code
# POST /State/Components Invalid NodeBMC API response body
# POST /State/Components Invalid NodeEnclosure API response code
# POST /State/Components Invalid NodeEnclosure API response body
# POST /State/Components Invalid RouterBMC API response code
# POST /State/Components Invalid RouterBMC API response body
# POST /State/Components Invalid RouterModule API response code
# POST /State/Components Invalid RouterModule API response body
# GET /State/Components/{xname} Invalid Xname API response code
# GET /State/Components/{xname} Invalid Xname API response body
# PUT /State/Components/{xname} Invalid Component No Force API response code
# PUT /State/Components/{xname} Invalid Component No Force API response body
# PUT /State/Components/{xname} Invalid Component Force API response code
# PUT /State/Components/{xname} Invalid Component Force API response body
# DELETE /State/Components/{xname} Invalid Xname API response code
# DELETE /State/Components/{xname} Invalid Xname API response body
# GET /State/Components/ByNID/{nid} Invalid NID API response code
# GET /State/Components/ByNID/{nid} Invalid NID API response body
# PATCH /State/Components/BulkStateData Invalid Xname State Flag API response code
# PATCH /State/Components/BulkStateData Invalid Xname State Flag API response body
# PATCH /State/Components/BulkStateData Invalid State Flag API response code
# PATCH /State/Components/BulkStateData Invalid State Flag API response body
# PATCH /State/Components/BulkStateData Invalid State No Flag API response code
# PATCH /State/Components/BulkStateData Invalid State No Flag API response body
# PATCH /State/Components/{xname}/StateData Invalid Xname State Flag API response code
# PATCH /State/Components/{xname}/StateData Invalid Xname State Flag API response body
# PATCH /State/Components/{xname}/StateData Invalid Xname State No Flag API response code
# PATCH /State/Components/{xname}/StateData Invalid Xname State No Flag API response body
# PATCH /State/Components/{xname}/StateData Invalid State Flag API response code
# PATCH /State/Components/{xname}/StateData Invalid State Flag API response body
# PATCH /State/Components/BulkFlagOnly Invalid Xname API response code
# PATCH /State/Components/BulkFlagOnly Invalid Xname API response body
# PATCH /State/Components/BulkFlagOnly Invalid Flag API response code
# PATCH /State/Components/BulkFlagOnly Invalid Flag API response body
# PATCH /State/Components/BulkFlagOnly No Flag API response code
# PATCH /State/Components/BulkFlagOnly No Flag API response body
# PATCH /State/Components/{xname}/FlagOnly Invalid Xname API response code
# PATCH /State/Components/{xname}/FlagOnly Invalid Xname API response body
# PATCH /State/Components/{xname}/FlagOnly Invalid Flag API response code
# PATCH /State/Components/{xname}/FlagOnly Invalid Flag API response body
# PATCH /State/Components/{xname}/FlagOnly No Flag API response code
# PATCH /State/Components/{xname}/FlagOnly No Flag API response body
# PATCH /State/Components/BulkEnabled Invalid Enabled API response code
# PATCH /State/Components/BulkEnabled Invalid Enabled API response body
# PATCH /State/Components/{xname}/Enabled Invalid Xname API response code
# PATCH /State/Components/{xname}/Enabled Invalid Xname API response body
# PATCH /State/Components/BulkSoftwareStatus Invalid Xname API response code
# PATCH /State/Components/BulkSoftwareStatus Invalid Xname API response body
# PATCH /State/Components/{xname}/SoftwareStatus Invalid Xname API response code
# PATCH /State/Components/{xname}/SoftwareStatus Invalid Xname API response body
# PATCH /State/Components/{xname}/Role Invalid Role API response code
# PATCH /State/Components/{xname}/Role Invalid Role API response body
# PATCH /State/Components/BulkNID No NID API response code
# PATCH /State/Components/BulkNID No NID API response body
# PATCH /State/Components/{xname}/NID Invalid Xname API response code
# PATCH /State/Components/{xname}/NID Invalid Xname API response body
# POST /State/Components/Query Invalid Xname API response code
# POST /State/Components/Query Invalid Xname API response body
# POST /State/Components/ByNID/Query Invalid NID API response code
# POST /State/Components/ByNID/Query Invalid NID API response body
# GET /State/Components/Query/{xname} Invalid Xname API response code
# GET /State/Components/Query/{xname} Invalid Xname API response body
---
test_name: hsmAPIstateComponentsNegativeInvalidParams

marks:
  - parametrize:
      key: param
      vals:
        # GET /State/Components?id={id} Invalid ID Parameter API response code
        # GET /State/Components?id={id} Invalid ID Parameter API response body
        - "id"
        # GET /State/Components?type={type} Invalid Type Parameter API response code
        # GET /State/Components?type={type} Invalid Type Parameter API response body
        - "type"
        # GET /State/Components?state={state} Invalid State Parameter API response code
        # GET /State/Components?state={state} Invalid State Parameter API response body
        - "state"
        # GET /State/Components?flag={flag} Invalid Flag Parameter API response code
        # GET /State/Components?flag={flag} Invalid Flag Parameter API response body
        - "flag"
        # GET /State/Components?role={role} Invalid Role Parameter API response code
        # GET /State/Components?role={role} Invalid Role Parameter API response body
        - "role"
        # GET /State/Components?subrole={subrole} Invalid SubRole Parameter API response code
        # GET /State/Components?subrole={subrole} Invalid SubRole Parameter API response body
        - "subrole"
        # GET /State/Components?enabled={enabled} Invalid Enabled Parameter API response code
        # GET /State/Components?enabled={enabled} Invalid Enabled Parameter API response body
        - "enabled"
        # GET /State/Components?arch={arch} Invalid Arch Parameter API response code
        # GET /State/Components?arch={arch} Invalid Arch Parameter API response body
        - "arch"
        # GET /State/Components?class={class} Invalid Class Parameter API response code
        # GET /State/Components?class={class} Invalid Class Parameter API response body
        - "class"
        # GET /State/Components?nid={nid} Invalid NID Parameter API response code
        # GET /State/Components?nid={nid} Invalid NID Parameter API response body
        - "nid"
        # GET /State/Components?nid_start={nid_start} Invalid NID_Start Parameter API response code
        # GET /State/Components?nid_start={nid_start} Invalid NID_Start Parameter API response body
        - "nid_start"
        # GET /State/Components?nid_end={nid_end} Invalid NID_End Parameter API response code
        # GET /State/Components?nid_end={nid_end} Invalid NID_End Parameter API response body
        - "nid_end"

stages:
  - name: hsmAPIstateComponentsGETinvalidParams - Attempt to retrieve Components with various invalid parameters using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?{param}=FAKE"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                pattern: "bad query param:*"
              status:
                type: int
                required: True
                enum:
                  - 400

---
test_name: hsmAPIstateComponentsNegative

stages:
  - name: Get access token
    request:
      url: "{opaal_base_url}/token"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          access_token: access_token
  # POST /State/Components Invalid CabinetPDUController API response code
  # POST /State/Components Invalid CabinetPDUController API response body
  - name: hsmAPIstateComponentsPOSTinvalidCabinetPDUController - Attempt to create a CabinetPDUController Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9998m3","Type":"CabinetPDUController","State":"FAKE","Flag":"OK","Enabled":true,"NetType":"Infiniband","Arch":"X86"}],"Force":false}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "couldn't validate components: state 'FAKE' is invalid"
              status:
                type: int
                required: True
                enum:
                  - 400

  # POST /State/Components Invalid Chassis API response code
  # POST /State/Components Invalid Chassis API response body
  - name: hsmAPIstateComponentsPOSTinvalidChassis - Attempt to create a Chassis Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9998c7","Type":"Chassis","State":"Off","Flag":"FAKE","Enabled":true,"NetType":"Sling","Arch":"X86","Class":"Mountain"}],"Force":false}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "couldn't validate components: flag 'FAKE' is invalid"
              status:
                type: int
                required: True
                enum:
                  - 400

  # POST /State/Components Invalid ChassisBMC API response code
  # POST /State/Components Invalid ChassisBMC API response body
  - name: hsmAPIstateComponentsPOSTinvalidChassisBMC - Attempt to create a ChassisBMC Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7b0","Type":"ChassisBMC","State":"Ready","Flag":"OK","Enabled":"fake","NetType":"Sling","Arch":"X86","Class":"Mountain"}],"Force":false}
    response:
      status_code: 500
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Internal Server Error"
              detail:
                type: str
                required: True
                enum:
                  - "error decoding JSON json: cannot unmarshal string into Go struct field Component.Components.Enabled of type bool"
              status:
                type: int
                required: True
                enum:
                  - 500

  # POST /State/Components Invalid HSNBoard API response code
  # POST /State/Components Invalid HSNBoard API response body
  - name: hsmAPIstateComponentsPOSTinvalidHSNBoard - Attempt to create an HSNBoard Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7r9e9","Type":"HSNBoard","State":"On","Flag":"Warning","Enabled":false,"NetType":"FAKE","Arch":"X86","Class":"River"}],"Force":false}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "couldn't validate components: netType 'FAKE' is invalid"
              status:
                type: int
                required: True
                enum:
                  - 400

  # POST /State/Components Invalid Node API response code
  # POST /State/Components Invalid Node API response body
  - name: hsmAPIstateComponentsPOSTinvalidNode - Attempt to create a Node Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b9n9","Type":"Node","State":"On","Flag":"OK","Enabled":true,"SoftwareStatus":"AdminStatus","Role":"Compute","NID":9999999999,"NetType":"Sling","Arch":"FAKE","Class":"River"}],"Force":false}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "couldn't validate components: arch 'FAKE' is invalid"
              status:
                type: int
                required: True
                enum:
                  - 400

  # POST /State/Components Invalid NodeBMC API response code
  # POST /State/Components Invalid NodeBMC API response body
  - name: hsmAPIstateComponentsPOSTinvalidNodeBMC - Attempt to create a NodeBMC Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b9","Type":"NodeBMC","State":"Ready","Flag":"OK","Enabled":true,"Role":"Management","NetType":"Sling","Arch":"X86","Class":"FAKE","Locked":false}],"Force":false}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "couldn't validate components: class 'FAKE' is invalid"
              status:
                type: int
                required: True
                enum:
                  - 400

  # POST /State/Components Invalid NodeEnclosure API response code
  # POST /State/Components Invalid NodeEnclosure API response body
  - name: hsmAPIstateComponentsPOSTinvalidNodeEnclosure - Attempt to create a NodeEnclosure Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9e9","Type":"NodeEnclosure","State":"On","Flag":"OK","Enabled":false,"NetType":"Sling","Arch":"X86","Class":"Mountain"}],"Force":FAKE}
    response:
      status_code: 500
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Internal Server Error"
              detail:
                type: str
                required: True
                enum:
                  - "error decoding JSON json: cannot unmarshal string into Go struct field ComponentsPost.force of type bool"
              status:
                type: int
                required: True
                enum:
                  - 500

  # POST /State/Components Invalid RouterBMC API response code
  # POST /State/Components Invalid RouterBMC API response body
  - name: hsmAPIstateComponentsPOSTinvalidRouterBMC - Attempt to create a RouterBMC Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7r9FAKE9","Type":"RouterBMC","State":"Ready","Flag":"OK","Enabled":true,"NetType":"Sling","Arch":"X86","Class":"Mountain"}],"Force":false}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "couldn't validate components: xname ID 'x9999c7r9FAKE9' is invalid"
              status:
                type: int
                required: True
                enum:
                  - 400

  # POST /State/Components Invalid RouterModule API response code
  # POST /State/Components Invalid RouterModule API response body
  - name: hsmAPIstateComponentsPOSTinvalidRouterModule - Attempt to create a RouterModule Component with an invalid payload using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"FAKE":"x9999c7r9","Type":"RouterModule","State":"Empty","Flag":"OK","Enabled":true,"NetType":"Sling","Arch":"X86","Class":"Mountain"}],"Force":false}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "Missing Components"
              status:
                type: int
                required: True
                enum:
                  - 400

  # GET /State/Components/{xname} Invalid Xname API response code
  # GET /State/Components/{xname} Invalid Xname API response body
  - name: hsmAPIstateComponentsGETinvalidXname - Attempt to retrieve a Component with an invalid xname using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/FAKE"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "no such xname."
              status:
                type: int
                required: True
                enum:
                  - 404

  # PUT /State/Components/{xname} Invalid Component No Force API response code
  # PUT /State/Components/{xname} Invalid Component No Force API response body
  - name: hsmAPIstateComponentsPUTinvalidComponentNoForce - Attempt to create a Component with an invalid payload using PUT without the force option.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9998c7s9b9n9"
      method: PUT
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Component":{"ID":"x9998c7s9b9n9","Type":"Node","State":"Standby","Flag":"Alert","Enabled":"FAKE","SoftwareStatus":"AdminStatus","Role":"Compute","NID":9998999999,"NetType":"Infiniband","Arch":"ARM","Class":"River"},"Force":false}
    response:
      #TODO: this should be a "Bad Request" status code 400 instead, or the Swagger needs to be updated with "Internal Server Error" code 500 CASMHMS-5828
      status_code: 500
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Internal Server Error"
              detail:
                type: str
                required: True
                enum:
                  - "error decoding JSON json: cannot unmarshal string into Go struct field Component.component.Enabled of type bool"
              status:
                type: int
                required: True
                enum:
                  - 500

  # PUT /State/Components/{xname} Invalid Component Force API response code
  # PUT /State/Components/{xname} Invalid Component Force API response body
  - name: hsmAPIstateComponentsPUTinvalidComponentForce - Attempt to create a Component with an invalid payload using PUT with the force option.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9998c7s9b9n9"
      method: PUT
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Component":{"ID":"x9998c7s9b9n9","Type":"Node","State":"Standby","Flag":"Alert","Enabled":"FAKE","SoftwareStatus":"AdminStatus","Role":"Compute","NID":9998999999,"NetType":"Infiniband","Arch":"ARM","Class":"River"},"Force":true}
    response:
      #TODO: this should be a "Bad Request" status code 400 instead, or the Swagger needs to be updated with "Internal Server Error" code 500 CASMHMS-5828
      status_code: 500
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Internal Server Error"
              detail:
                type: str
                required: True
                enum:
                  - "error decoding JSON json: cannot unmarshal string into Go struct field Component.component.Enabled of type bool"
              status:
                type: int
                required: True
                enum:
                  - 500

  # DELETE /State/Components/{xname} Invalid Xname API response code
  # DELETE /State/Components/{xname} Invalid Xname API response body
  - name: hsmAPIstateComponentsDELETEinvalidXname - Attempt to remove a Component with an invalid xname using DELETE.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/FAKE"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname"
              status:
                type: int
                required: True
                enum:
                  - 400

  # GET /State/Components/ByNID/{nid} Invalid NID API response code
  # GET /State/Components/ByNID/{nid} Invalid NID API response body
  - name: hsmAPIstateComponentsByNidGETinvalidNid - Attempt to retrieve a Component with an invalid NID using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/FAKE"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "a required argument was not an integer"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkStateData Invalid Xname State Flag API response code
  # PATCH /State/Components/BulkStateData Invalid Xname State Flag API response body
  - name: hsmAPIstateComponentsBulkStateDataPATCHinvalidXnameStateFlag - Attempt to bulk update Components with new state data and an invalid xname using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkStateData"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n8","FAKE"],"State":"On","Flag":"Alert","Force":true}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkStateData Invalid State Flag API response code
  # PATCH /State/Components/BulkStateData Invalid State Flag API response body
  - name: hsmAPIstateComponentsBulkStateDataPATCHinvalidStateFlag - Attempt to bulk update Components with new state data and an invalid state using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkStateData"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n8","x9999c7s9b8n7"],"State":"FAKE","Flag":"Alert","Force":true}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "Argument was not a valid HMS State"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkStateData Invalid State No Flag API response code
  # PATCH /State/Components/BulkStateData Invalid State No Flag API response body
  - name: hsmAPIstateComponentsBulkStateDataPATCHinvalidStateNoFlag - Attempt to bulk update Components with new state data, an invalid state, and no flag using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkStateData"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n8","x9999c7s9b8n7"],"State":"FAKE","Force":true}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "Argument was not a valid HMS State"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/{xname}/StateData Invalid Xname State Flag API response code
  # PATCH /State/Components/{xname}/StateData Invalid Xname State Flag API response body
  - name: hsmAPIstateComponentsXnameStateDataPATCHinvalidXnameStateFlag - Attempt to update a Component with new state data and an invalid xname using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/FAKE/StateData"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"State":"Ready","Flag":"OK","Force":true}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/{xname}/StateData Invalid Xname State No Flag API response code
  # PATCH /State/Components/{xname}/StateData Invalid Xname State No Flag API response body
  - name: hsmAPIstateComponentsXnameStateDataPATCHinvalidXnameStateNoFlag - Attempt to update a Component with new state data, an invalid xname, and no flag using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/FAKE/StateData"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"State":"Ready","Force":true}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/{xname}/StateData Invalid State Flag API response code
  # PATCH /State/Components/{xname}/StateData Invalid State Flag API response body
  - name: hsmAPIstateComponentsXnameStateDataPATCHinvalidStateFlag - Attempt to update a Component with new state data and an invalid state using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n7/StateData"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"State":"FAKE","Flag":"OK","Force":true}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "Argument was not a valid HMS State"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkFlagOnly Invalid Xname API response code
  # PATCH /State/Components/BulkFlagOnly Invalid Xname API response body
  - name: hsmAPIstateComponentsBulkFlagOnlyPATCHinvalidXname - Attempt to bulk update Components with new flag data and an invalid xname using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkFlagOnly"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["FAKE","x9999c7s9b8n6"],"Flag":"Warning"}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkFlagOnly Invalid Flag API response code
  # PATCH /State/Components/BulkFlagOnly Invalid Flag API response body
  - name: hsmAPIstateComponentsBulkFlagOnlyPATCHinvalidFlag - Attempt to bulk update Components with new flag data and an invalid flag using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkFlagOnly"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n7","x9999c7s9b8n6"],"Flag":"FAKE"}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "a required argument did not match any valid input"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkFlagOnly No Flag API response code
  # PATCH /State/Components/BulkFlagOnly No Flag API response body
  - name: hsmAPIstateComponentsBulkFlagOnlyPATCHnoFlag - Attempt to bulk update Components with new flag data and no flag using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkFlagOnly"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n7","x9999c7s9b8n6"]}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "Missing Flag"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/{xname}/FlagOnly Invalid Xname API response code
  # PATCH /State/Components/{xname}/FlagOnly Invalid Xname API response body
  - name: hsmAPIstateComponentsXnameFlagOnlyPATCHinvalidXname - Attempt to update a Component with new flag data and an invalid xname using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/FAKE/FlagOnly"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Flag":"OK"}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/{xname}/FlagOnly Invalid Flag API response code
  # PATCH /State/Components/{xname}/FlagOnly Invalid Flag API response body
  - name: hsmAPIstateComponentsXnameFlagOnlyPATCHinvalidFlag - Attempt to update a Component with new flag data and an invalid flag using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8/FlagOnly"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Flag":"FAKE"}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "a required argument did not match any valid input"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/{xname}/FlagOnly No Flag API response code
  # PATCH /State/Components/{xname}/FlagOnly No Flag API response body
  - name: hsmAPIstateComponentsXnameFlagOnlyPATCHnoFlag - Attempt to update a Component with new flag data and no flag using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8/FlagOnly"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"foo":"bar"}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "Missing Flag"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkEnabled Invalid Enabled API response code
  # PATCH /State/Components/BulkEnabled Invalid Enabled API response body
  - name: hsmAPIstateComponentsBulkEnabledPATCHinvalidEnabled - Attempt to bulk update Components with new enabled data and an invalid enabled field using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkEnabled"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n7","x9999c7s9b8n6"],"Enabled":"FAKE"}
    response:
      #TODO: this should be a "Bad Request" status code 400 instead, or the Swagger needs to be updated with "Internal Server Error" code 500 CASMHMS-5828
      status_code: 500
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Internal Server Error"
              detail:
                type: str
                required: True
                enum:
                  - "error decoding JSON json: cannot unmarshal string into Go struct field CompUpdate.Enabled of type bool"
              status:
                type: int
                required: True
                enum:
                  - 500

  # PATCH /State/Components/{xname}/Enabled Invalid Xname API response code
  # PATCH /State/Components/{xname}/Enabled Invalid Xname API response body
  - name: hsmAPIstateComponentsXnameEnabledPATCHinvalidXname - Attempt to update a Component with new enabled data and an invalid xname using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/FAKE/Enabled"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Enabled":false}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkSoftwareStatus Invalid Xname API response code
  # PATCH /State/Components/BulkSoftwareStatus Invalid Xname API response body
  - name: hsmAPIstateComponentsBulkSoftwareStatusPATCHinvalidXname - Attempt to bulk update Components with new softwarestatus data and an invalid xname using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkSoftwareStatus"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["FAKE","x9999c7s9b8n6"],"SoftwareStatus":"UpdatedBulkSoftwareStatus"}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/{xname}/SoftwareStatus Invalid Xname API response code
  # PATCH /State/Components/{xname}/SoftwareStatus Invalid Xname API response body
  - name: hsmAPIstateComponentsXnameSoftwareStatusPATCHinvalidXname - Attempt to update a Component with new softwarestatus data and an invalid xname using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/FAKE/SoftwareStatus"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"SoftwareStatus":"UpdatedXnameSoftwareStatus"}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/{xname}/Role Invalid Role API response code
  # PATCH /State/Components/{xname}/Role Invalid Role API response body
  - name: hsmAPIstateComponentsXnameRolePATCHinvalidRole - Attempt to update a Component with new role data and an invalid role using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8/Role"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Role":"FAKE","SubRole":"Worker"}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "a required argument did not match any valid input"
              status:
                type: int
                required: True
                enum:
                  - 400

  # PATCH /State/Components/BulkNID No NID API response code
  # PATCH /State/Components/BulkNID No NID API response body
  - name: hsmAPIstateComponentsBulkNidPATCHnoNid - Attempt to bulk update Components with new NID data and no NID using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkNID"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b8n7","NID":9999999977},{"ID":"x9999c7s9b8n6","NID":""}]}
    response:
      #TODO: this should be a "Bad Request" status code 400 instead, or the Swagger needs to be updated with "Internal Server Error" code 500 CASMHMS-5828
      status_code: 500
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Internal Server Error"
              detail:
                type: str
                required: True
                enum:
                  - "error decoding JSON json: invalid number literal, trying to unmarshal \"\\\"\\\"\" into Number"
              status:
                type: int
                required: True
                enum:
                  - 500

  # PATCH /State/Components/{xname}/NID Invalid Xname API response code
  # PATCH /State/Components/{xname}/NID Invalid Xname API response body
  - name: hsmAPIstateComponentsXnameNidPATCHinvalidXname - Attempt to update a Component with new NID data and an invalid xname using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/FAKE/NID"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NID":9999999978}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "invalid xname ID"
              status:
                type: int
                required: True
                enum:
                  - 400

#  # POST /State/Components/Query Invalid Xname API response code
#  # POST /State/Components/Query Invalid Xname API response body
#  - name: hsmAPIstateComponentsQueryPOSTinvalidXname - Attempt a query for Components with an invalid xname using POST.
#    request:
#      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
#      method: POST
#      verify: !bool "{verify}"
#      headers:
#        Authorization: "Bearer {access_token}"
#      #TODO: this should be a "Bad Request" with "invalid xname" returned, instead it attempts to use the invalid xname CASMHMS-5829
#      json: {"ComponentIDs":["FAKE"]}
#    response:
#      status_code: 400
#      verify_response_with:
#        function: tavern.testutils.helpers:validate_pykwalify
#        extra_kwargs:
#          schema:
#            type: map
#            required: True
#            mapping:
#              type:
#                type: str
#                required: True
#                enum:
#                  - "about:blank"
#              title:
#                type: str
#                required: True
#                enum:
#                  - "Bad Request"
#              detail:
#                type: str
#                required: True
#                enum:
#                  - "invalid xname ID"
#              status:
#                type: int
#                required: True
#                enum:
#                  - 400

  # POST /State/Components/ByNID/Query Invalid NID API response code
  # POST /State/Components/ByNID/Query Invalid NID API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTinvalidNID - Attempt a query for Components with an invalid NID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["FAKE"]}
    response:
      status_code: 400
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Bad Request"
              detail:
                type: str
                required: True
                enum:
                  - "bad query param: a required argument was not an integer"
              status:
                type: int
                required: True
                enum:
                  - 400

#  # GET /State/Components/Query/{xname} Invalid Xname API response code
#  # GET /State/Components/Query/{xname} Invalid Xname API response body
#  - name: hsmAPIstateComponentsQueryXnameGETinvalidXname - Attempt a query for Components with a specific xname and invalid xname using POST.
#    request:
#      #TODO: this should be a "Bad Request" with "invalid xname" returned, instead it attempts to use the invalid xname CASMHMS-5829
#      url: "{hsm_base_url}/hsm/v2/State/Components/Query/FAKE"
#      method: GET
#      verify: !bool "{verify}"
#      headers:
#        Authorization: "Bearer {access_token}"
#    response:
#      status_code: 400
#      verify_response_with:
#        function: tavern.testutils.helpers:validate_pykwalify
#        extra_kwargs:
#          schema:
#            type: map
#            required: True
#            mapping:
#              type:
#                type: str
#                required: True
#                enum:
#                  - "about:blank"
#              title:
#                type: str
#                required: True
#                enum:
#                  - "Bad Request"
#              detail:
#                type: str
#                required: True
#                enum:
#                  - "invalid xname ID"
#              status:
#                type: int
#                required: True
#                enum:
#                  - 400

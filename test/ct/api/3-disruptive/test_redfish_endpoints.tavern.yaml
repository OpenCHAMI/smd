# MIT License
#
# (C) Copyright [2022-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) RedfishEndpoints API
# Author: Manny Alvarez
# Service: Hardware State Manager

# HMS test metrics test cases: 31
# DELETE /Inventory/RedfishEndpoints/{xname1} Clean up leftovers 1
# DELETE /Inventory/RedfishEndpoints/{xname2} Clean up leftovers 2
# DELETE /Inventory/RedfishEndpoints/{xname3} Clean up leftovers 3
# DELETE /Inventory/RedfishEndpoints/{xname4} Clean up leftovers 4
# POST /Inventory/RedfishEndpoints Create 1 RFEndpoint (xname1)
# POST /Inventory/RedfishEndpoints Create already existent RFEndpoint
# GET /Inventory/RedfishEndpoints/{xname1} Check discovery status
# DELETE /Inventory/RedfishEndpoints/{xname1} Delete RFEndpoint
# DELETE /Inventory/RedfishEndpoints/{xname1} Delete on non-existent RFEndpoint
# POST /Inventory/RedfishEndpoints Create 3 RFEndpoints (2 disabled) (xname2, xname3, xname4)
# GET /Inventory/RedfishEndpoints Check discovery status (on enabled)
# GET /Inventory/RedfishEndpoints Check discovery status (on disabled)
# PATCH /Inventory/RedfishEndpoints/{xname3} Patch Hostname (hostname FQDN mismatch)
# PATCH /Inventory/RedfishEndpoints/{xname3} Patch FQDN and Hostname
# PATCH /Inventory/RedfishEndpoints/{xname4} Patch same FQDN (fail)
# PATCH /Inventory/RedfishEndpoints/{xname3} Patch MACAddr
# PATCH /Inventory/RedfishEndpoints/{xname3} Patch RediscoverOnUpdate true
# GET /Inventory/RedfishEndpoints/{xname3} Check discovery not triggered
# PATCH /Inventory/RedfishEndpoints/{xname3} Patch RediscoverOnUpdate false, Enabled true
# GET /Inventory/RedfishEndpoints/{xname3} Check discovery not triggered
# PATCH /Inventory/RedfishEndpoints/{xname3} Patch RediscoverOnUpdate true
# GET /Inventory/RedfishEndpoints/{xname3} Check discovery triggered
# PUT /Inventory/RedfishEndpoints/{xname4} Replace all attributes
# GET /Inventory/RedfishEndpoints/{xname4} Check discovery triggered
# DELETE /Inventory/RedfishEndpoints/{xname3} Delete 1 RFEndpoint
# PUT /Inventory/RedfishEndpoints/{xname3} PUT on non-existent RFEndpoint
# PATCH /Inventory/RedfishEndpoints/{xname3} Patch on non-existent RFEndpoint
# DELETE /Inventory/RedfishEndpoints/{xname1} Clean up leftovers 1
# DELETE /Inventory/RedfishEndpoints/{xname2} Clean up leftovers 2
# DELETE /Inventory/RedfishEndpoints/{xname3} Clean up leftovers 3
# DELETE /Inventory/RedfishEndpoints/{xname4} Clean up leftovers 4
---
test_name: hsmAPIRedfishEndpoints

stages:

  - name: Get access token
    request:
      url: "{opaal_base_url}/token"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          access_token: access_token

  ##############################################
  # Remove any test RFEndpoints we previously created.
  # This will also remove any locks/reservations
  # hanging around.
  ##############################################

  # DELETE /Inventory/RedfishEndpoints/{xname1} Clean up leftovers 1
  - name: hsmAPIRedfishEndpointsDELETE - Delete leftover test RFEndpoint x9999c7s99b91
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b91"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

  # DELETE /Inventory/RedfishEndpoints/{xname2} Clean up leftovers 2
  - name: hsmAPIRedfishEndpointsDELETE - Delete leftover test RFEndpoint x9999c7s99b92
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b92"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

  # DELETE /Inventory/RedfishEndpoints/{xname3} Clean up leftovers 3
  - name: hsmAPIRedfishEndpointsDELETE - Delete leftover test RFEndpoint x9999c7s99b93
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

  # DELETE /Inventory/RedfishEndpoints/{xname4} Clean up leftovers 4
  - name: hsmAPIRedfishEndpointsDELETE - Delete leftover test RFEndpoint x9999c7s99b94
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b94"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

  ##############################################
  # Begin Tests
  ##############################################

  # POST /Inventory/RedfishEndpoints Create 1 RFEndpoint (xname1)
  - name: hsmAPIRedfishEndpointsPOST - Create 1 RFEndpoint
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ID":"x9999c7s99b91","Enabled":true,"RediscoverOnUpdate":true}
    response:
      status_code: 201
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: seq
              required: True
              sequence:
                - type: map
                  required: True
                  mapping:
                    URI:
                      type: str
                      required: True
                      enum:
                        - "/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b91"
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@)"
                operator: "eq"
                expected: 1

  # POST /Inventory/RedfishEndpoints Create already existent RFEndpoint
  - name: hsmAPIRedfishEndpointsPOST - Create already existent RFEndpoint
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ID":"x9999c7s99b91","Enabled":true,"RediscoverOnUpdate":true}
    response:
      status_code: 409
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Conflict"
              detail:
                type: str
                required: True
                enum:
                  - "operation would conflict with an existing resource that has the same FQDN or xname ID."
              status:
                type: int
                required: True
                enum:
                  - 409

  # GET /Inventory/RedfishEndpoints/{xname1} Check discovery status
  - name: hsmAPIRedfishEndpointsGET - Check discovery status xname1
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b91"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: True
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      # Depending on how fast things happen, the status could have already failed.
                      # The point is that it isn't NotYetQueried
                      - "HTTPsGetFailed"
                      - "DiscoveryStarted"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
              Enabled:
                type: bool
                required: True
                enum:
                  - True
              FQDN:
                type: str
                required: True
                enum:
                  - "x9999c7s99b91"
              Hostname:
                type: str
                required: True
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b91"
              MACAddr:
                type: str
                required: False
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # DELETE /Inventory/RedfishEndpoints/{xname1} Delete RFEndpoint
  - name: hsmAPIRedfishEndpointsXNameDELETE - Delete RFEndpoint
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b91"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              code:
                type: int
                required: True
                enum:
                  - 0
              message:
                type: str
                required: True
                enum:
                  - "deleted 1 entry"

  # DELETE /Inventory/RedfishEndpoints/{xname1} Delete on non-existent RFEndpoint
  - name: hsmAPIRedfishEndpointsXNameDELETE - Delete RFEndpoint
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b91"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "no such xname."
              status:
                type: int
                required: True
                enum:
                  - 404

  # POST /Inventory/RedfishEndpoints Create 3 RFEndpoints (2 disabled) (xname2, xname3, xname4)
  - name: hsmAPIRedfishEndpointsPOST - Create 3 RFEndpoints
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"RedfishEndpoints":[{"ID":"x9999c7s99b92","Enabled":true,"RediscoverOnUpdate":true},{"ID":"x9999c7s99b93","Enabled":false,"RediscoverOnUpdate":false},{"ID":"x9999c7s99b94","Enabled":false,"RediscoverOnUpdate":false}]}
    response:
      status_code: 201
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: seq
              required: True
              sequence:
                - type: map
                  required: True
                  mapping:
                    URI:
                      type: str
                      required: True
                      enum:
                        - "/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b92"
                        - "/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
                        - "/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b94"
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@)"
                operator: "eq"
                expected: 3

  # GET /Inventory/RedfishEndpoints Check discovery status (on enabled)
  - name: hsmAPIRedfishEndpointsGET - Check discovery status (on enabled)
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints?id=x9999c7s99b92"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                RedfishEndpoints:
                  type: seq
                  required: True
                  sequence:
                    - type: map
                      required: True
                      mapping:
                        DiscoveryInfo:
                          type: map
                          mapping:
                            LastDiscoveryAttempt:
                              type: timestamp
                              required: True
                            LastDiscoveryStatus:
                              type: str
                              required: True
                              enum:
                                # Depending on how fast things happen, the status could have already failed.
                                # The point is that it isn't NotYetQueried
                                - "HTTPsGetFailed"
                                - "DiscoveryStarted"
                            RedfishVersion:
                              type: str
                              required: False
                        Domain:
                          type: str
                          required: True
                        Enabled:
                          type: bool
                          required: True
                          enum:
                            - True
                        FQDN:
                          type: str
                          required: True
                          enum:
                            - "x9999c7s99b92"
                        Hostname:
                          type: str
                          required: True
                        ID:
                          type: str
                          required: True
                          enum:
                            - "x9999c7s99b92"
                        MACAddr:
                          type: str
                          required: False
                        Password:
                          type: str
                          required: True
                          enum:
                            - ""
                        IPAddress:
                          type: str
                          required: False
                        RediscoverOnUpdate:
                          type: bool
                          required: True
                        Type:
                          type: str
                          required: True
                          enum:
                            - "NodeBMC"
                        UUID:
                          type: str
                          required: False
                        User:
                          type: str
                          required: True
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@.RedfishEndpoints)"
                operator: "eq"
                expected: 1

  # GET /Inventory/RedfishEndpoints Check discovery status (on disabled)
  - name: hsmAPIRedfishEndpointsGET - Check discovery status (on disabled)
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints?id=x9999c7s99b93&id=x9999c7s99b94"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        - function: tavern.testutils.helpers:validate_pykwalify
          extra_kwargs:
            schema:
              type: map
              required: True
              mapping:
                RedfishEndpoints:
                  type: seq
                  required: True
                  sequence:
                    - type: map
                      required: True
                      mapping:
                        DiscoveryInfo:
                          type: map
                          mapping:
                            LastDiscoveryAttempt:
                              type: timestamp
                              required: False
                            LastDiscoveryStatus:
                              type: str
                              required: True
                              enum:
                                - "NotYetQueried"
                            RedfishVersion:
                              type: str
                              required: False
                        Domain:
                          type: str
                          required: True
                        Enabled:
                          type: bool
                          required: True
                          enum:
                            - False
                        FQDN:
                          type: str
                          required: True
                          enum:
                            - "x9999c7s99b93"
                            - "x9999c7s99b94"
                        Hostname:
                          type: str
                          required: True
                        ID:
                          type: str
                          required: True
                          enum:
                            - "x9999c7s99b93"
                            - "x9999c7s99b94"
                        MACAddr:
                          type: str
                          required: False
                        Password:
                          type: str
                          required: True
                          enum:
                            - ""
                        IPAddress:
                          type: str
                          required: False
                        RediscoverOnUpdate:
                          type: bool
                          required: True
                        Type:
                          type: str
                          required: True
                          enum:
                            - "NodeBMC"
                        UUID:
                          type: str
                          required: False
                        User:
                          type: str
                          required: True
        - function: tavern.testutils.helpers:validate_content
          extra_kwargs:
            comparisons:
              - jmespath: "length(@.RedfishEndpoints)"
                operator: "eq"
                expected: 2

  # PATCH /Inventory/RedfishEndpoints/{xname3} Patch Hostname (hostname FQDN mismatch)
  - name: hsmAPIRedfishEndpointsPATCH - Patch Hostname (hostname FQDN mismatch)
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Hostname":"MyHostname"}
    response:
      status_code: 500
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Internal Server Error"
              detail:
                type: str
                required: True
                enum:
                  - "operation 'PATCH' failed during store"
              status:
                type: int
                required: True
                enum:
                  - 500

  # PATCH /Inventory/RedfishEndpoints/{xname3} Patch FQDN and Hostname
  - name: hsmAPIRedfishEndpointsPATCH - Patch FQDN and Hostname
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Hostname":"MyHostname","FQDN":"MyHostname"}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: False
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "NotYetQueried"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - False
              FQDN:
                type: str
                required: True
                enum:
                  - "MyHostname"
              Hostname:
                type: str
                required: True
                enum:
                  - "MyHostname"
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b93"
              MACAddr:
                type: str
                required: False
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - False
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # PATCH /Inventory/RedfishEndpoints/{xname4} Patch same FQDN (fail)
  - name: hsmAPIRedfishEndpointsPATCH - Patch same FQDN (fail)
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b94"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"FQDN":"MyHostname"}
    response:
      status_code: 409
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Conflict"
              detail:
                type: str
                required: True
                enum:
                  - "operation would conflict with an existing resource that has the same FQDN"
              status:
                type: int
                required: True
                enum:
                  - 409

  # PATCH /Inventory/RedfishEndpoints/{xname3} Patch MACAddr
  - name: hsmAPIRedfishEndpointsPATCH - Patch FQDN and Hostname
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"MACAddr":"ff:ff:ff:ff:ff:ff:ff:ff"}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: False
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "NotYetQueried"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - False
              FQDN:
                type: str
                required: True
                enum:
                  - "MyHostname"
              Hostname:
                type: str
                required: True
                enum:
                  - "MyHostname"
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b93"
              MACAddr:
                type: str
                required: True
                enum:
                  - "ff:ff:ff:ff:ff:ff:ff:ff"
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - False
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # PATCH /Inventory/RedfishEndpoints/{xname3} Patch RediscoverOnUpdate true
  - name: hsmAPIRedfishEndpointsPATCH - Patch RediscoverOnUpdate true
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"RediscoverOnUpdate":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: False
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "NotYetQueried"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - False
              FQDN:
                type: str
                required: True
                enum:
                  - "MyHostname"
              Hostname:
                type: str
                required: True
                enum:
                  - "MyHostname"
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b93"
              MACAddr:
                type: str
                required: True
                enum:
                  - "ff:ff:ff:ff:ff:ff:ff:ff"
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - True
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # GET /Inventory/RedfishEndpoints/{xname3} Check discovery not triggered
  - name: hsmAPIRedfishEndpointsGET - Check discovery not triggered RediscoverOnUpdate true, Enabled false
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: False
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "NotYetQueried"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - False
              FQDN:
                type: str
                required: True
                enum:
                  - "MyHostname"
              Hostname:
                type: str
                required: True
                enum:
                  - "MyHostname"
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b93"
              MACAddr:
                type: str
                required: True
                enum:
                  - "ff:ff:ff:ff:ff:ff:ff:ff"
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - True
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # PATCH /Inventory/RedfishEndpoints/{xname3} Patch RediscoverOnUpdate false, Enabled true
  - name: hsmAPIRedfishEndpointsPATCH - Patch RediscoverOnUpdate false, Enabled true
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"RediscoverOnUpdate":false,"Enabled":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: False
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "NotYetQueried"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - True
              FQDN:
                type: str
                required: True
                enum:
                  - "MyHostname"
              Hostname:
                type: str
                required: True
                enum:
                  - "MyHostname"
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b93"
              MACAddr:
                type: str
                required: True
                enum:
                  - "ff:ff:ff:ff:ff:ff:ff:ff"
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - False
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # GET /Inventory/RedfishEndpoints/{xname3} Check discovery not triggered
  - name: hsmAPIRedfishEndpointsGET - Check discovery not triggered RediscoverOnUpdate false, Enabled true
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: False
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "NotYetQueried"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - True
              FQDN:
                type: str
                required: True
                enum:
                  - "MyHostname"
              Hostname:
                type: str
                required: True
                enum:
                  - "MyHostname"
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b93"
              MACAddr:
                type: str
                required: True
                enum:
                  - "ff:ff:ff:ff:ff:ff:ff:ff"
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - False
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # PATCH /Inventory/RedfishEndpoints/{xname3} Patch RediscoverOnUpdate true
  - name: hsmAPIRedfishEndpointsPATCH - Patch RediscoverOnUpdate true (Enabled true)
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"RediscoverOnUpdate":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: False
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "NotYetQueried"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - True
              FQDN:
                type: str
                required: True
                enum:
                  - "MyHostname"
              Hostname:
                type: str
                required: True
                enum:
                  - "MyHostname"
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b93"
              MACAddr:
                type: str
                required: True
                enum:
                  - "ff:ff:ff:ff:ff:ff:ff:ff"
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - True
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # GET /Inventory/RedfishEndpoints/{xname3} Check discovery triggered
  - name: hsmAPIRedfishEndpointsGET - Check discovery triggered (RediscoverOnUpdate true, Enabled true)
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: True
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "DiscoveryStarted"
                      - "HTTPsGetFailed"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - True
              FQDN:
                type: str
                required: True
                enum:
                  - "MyHostname"
              Hostname:
                type: str
                required: True
                enum:
                  - "MyHostname"
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b93"
              MACAddr:
                type: str
                required: True
                enum:
                  - "ff:ff:ff:ff:ff:ff:ff:ff"
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - True
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True


  # PUT /Inventory/RedfishEndpoints/{xname4} Replace all attributes
  - name: hsmAPIRedfishEndpointsPUT - Replace all attributes
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b94"
      method: PUT
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ID":"x9999c7s99b94","Enabled":true,"RediscoverOnUpdate":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: False
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "NotYetQueried"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - True
              FQDN:
                type: str
                required: True
                enum:
                  - "x9999c7s99b94"
              Hostname:
                type: str
                required: True
                enum:
                  - ""
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b94"
              MACAddr:
                type: str
                required: False
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - True
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # GET /Inventory/RedfishEndpoints/{xname4} Check discovery triggered
  - name: hsmAPIRedfishEndpointsGET - Check discovery triggered after PUT
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b94"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              DiscoveryInfo:
                type: map
                mapping:
                  LastDiscoveryAttempt:
                    type: timestamp
                    required: True
                  LastDiscoveryStatus:
                    type: str
                    required: True
                    enum:
                      - "DiscoveryStarted"
                      - "HTTPsGetFailed"
                  RedfishVersion:
                    type: str
                    required: False
              Domain:
                type: str
                required: True
                enum:
                  - ""
              Enabled:
                type: bool
                required: True
                enum:
                  - True
              FQDN:
                type: str
                required: True
                enum:
                  - "x9999c7s99b94"
              Hostname:
                type: str
                required: True
                enum:
                  - ""
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s99b94"
              MACAddr:
                type: str
                required: False
              Password:
                type: str
                required: True
                enum:
                  - ""
              IPAddress:
                type: str
                required: False
              RediscoverOnUpdate:
                type: bool
                required: True
                enum:
                  - True
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              UUID:
                type: str
                required: False
              User:
                type: str
                required: True

  # DELETE /Inventory/RedfishEndpoints/{xname3} Delete 1 RFEndpoint
  - name: hsmAPIRedfishEndpointsDELETE - Delete x9999c7s99b93
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              code:
                type: int
                required: True
                enum:
                  - 0
              message:
                type: str
                required: True
                enum:
                  - "deleted 1 entry"

  # todo ochami added the ability to put a non-existent RFEndpoint
  # PUT /Inventory/RedfishEndpoints/{xname3} PUT on non-existent RFEndpoint
  # - name: hsmAPIRedfishEndpointsPUT - PUT on non-existent RFEndpoint
  #   request:
  #     url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
  #     method: PUT
  #     verify: !bool "{verify}"
  #     headers:
  #       Authorization: "Bearer {access_token}"
  #     json: {"ID":"x9999c7s99b93","Enabled":true,"RediscoverOnUpdate":true}
  #   response:
  #     status_code: 404
  #     verify_response_with:
  #       function: tavern.testutils.helpers:validate_pykwalify
  #       extra_kwargs:
  #         schema:
  #           type: map
  #           required: True
  #           mapping:
  #             type:
  #               type: str
  #               required: True
  #               enum:
  #                 - "about:blank"
  #             title:
  #               type: str
  #               required: True
  #               enum:
  #                 - "Not Found"
  #             detail:
  #               type: str
  #               required: True
  #               enum:
  #                 - "No such entry: x9999c7s99b93"
  #             status:
  #               type: int
  #               required: True
  #               enum:
  #                 - 404

  # PATCH /Inventory/RedfishEndpoints/{xname3} Patch on non-existent RFEndpoint
  - name: hsmAPIRedfishEndpointsPATCH - Patch on non-existent RFEndpoint
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Enabled":true,"RediscoverOnUpdate":true}
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "No such entry: x9999c7s99b93"
              status:
                type: int
                required: True
                enum:
                  - 404


  # DELETE /Inventory/RedfishEndpoints/{xname1} Clean up leftovers 1
  - name: hsmAPIRedfishEndpointsDELETE - Clean up test RFEndpoint x9999c7s99b91
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b91"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

  # DELETE /Inventory/RedfishEndpoints/{xname2} Clean up leftovers 2
  - name: hsmAPIRedfishEndpointsDELETE - Clean up test RFEndpoint x9999c7s99b92
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b92"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

  # DELETE /Inventory/RedfishEndpoints/{xname3} Clean up leftovers 3
  - name: hsmAPIRedfishEndpointsDELETE - Clean up test RFEndpoint x9999c7s99b93
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b93"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

  # DELETE /Inventory/RedfishEndpoints/{xname4} Clean up leftovers 4
  - name: hsmAPIRedfishEndpointsDELETE - Clean up test RFEndpoint x9999c7s99b94
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints/x9999c7s99b94"
      method: DELETE
      headers:
        Authorization: "Bearer {access_token}"

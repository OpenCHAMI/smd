# MIT License
#
# (C) Copyright [2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) Discover API
# Author: Mitch Schooler
# Service: Hardware State Manager

# HMS test metrics test cases: 3
# POST /Inventory/Discover single endpoint
# POST /Inventory/Discover multiple endpoints
# GET /DiscoveryStatus all
---
test_name: hsmAPIinventoryDiscover

stages:
  - name: Get access token
    request:
      url: "{opaal_base_url}/token"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          access_token: access_token

  - name: Retrieve three NodeBMC RedfishEndpoints from HSM to use in upcoming stages
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/RedfishEndpoints?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      save:
        json:
          redfishEndpoint1: RedfishEndpoints[0].ID
          redfishEndpoint2: RedfishEndpoints[1].ID
          redfishEndpoint3: RedfishEndpoints[2].ID

  # POST /Inventory/Discover single endpoint
  - name: hsmAPIinventoryDiscover - Initiate a hardware discovery operation for one endpoint
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/Discover"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"xnames":["{redfishEndpoint1}"],"force":false}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                required: True
                mapping:
                  URI:
                    type: str
                    required: True
                    pattern: "/hsm/v2/Inventory/DiscoveryStatus/[0-9]+"

  # POST /Inventory/Discover multiple endpoints
  - name: hsmAPIinventoryDiscover - Initiate a hardware discovery operation for two endpoints
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/Discover"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"xnames":["{redfishEndpoint2}","{redfishEndpoint3}"],"force":false}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            required: True
            sequence:
              - type: map
                required: True
                mapping:
                  URI:
                    type: str
                    required: True
                    pattern: "/hsm/v2/Inventory/DiscoveryStatus/[0-9]+"

  # GET /DiscoveryStatus all
  - name: Ensure that we can conduct a discovery status query
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/DiscoveryStatus"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: seq
            matching: all
            sequence:
              - type: map
                matching: all
                mapping:
                  ID:
                    type: int
                  LastUpdateTime:
                    type: timestamp
                  Status:
                    type: str
                    enum:
                      - "Complete"
                      - "InProgress"
                      - "NotStarted"
                      - "Pending"
                  Details:
                    type: map
                    required: False
                    mapping:
                      description:
                        type: str
                        required: False

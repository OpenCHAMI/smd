# MIT License
#
# (C) Copyright [2022-2024] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) service API
# Author: Mitch Schooler
# Service: Hardware State Manager

# HMS test metrics test cases: 310
# DELETE /State/Components API response code
# DELETE /State/Components API response body
# DELETE /State/Components No Components API response code
# DELETE /State/Components No Components API response body
# GET /State/Components No Components API response code
# GET /State/Components No Components API response body
# POST /State/Components Node API response code
# POST /State/Components Node API response body
# GET /State/Components API response code
# GET /State/Components API response body
# GET /State/Components?id={id} Node Parameter API response code
# GET /State/Components?id={id} Node Parameter API response body
# PUT /State/Components/{xname} Existing Node No Force API response code
# PUT /State/Components/{xname} Existing Node No Force API response body
# GET /State/Components/{xname} Node API response code
# GET /State/Components/{xname} Node API response body
# PUT /State/Components/{xname} Existing Node Force API response code
# PUT /State/Components/{xname} Existing Node Force API response body
# GET /State/Components/{xname} Node API response code
# GET /State/Components/{xname} Node API response body
# DELETE /State/Components/{xname} Node API response code
# DELETE /State/Components/{xname} Node API response body
# DELETE /State/Components/{xname} Missing Node API response code
# DELETE /State/Components/{xname} Missing Node API response body
# GET /State/Components/{xname} Missing Node API response code
# GET /State/Components/{xname} Missing Node API response body
# GET /State/Components/ByNID/{nid} Missing NID API response code
# GET /State/Components/ByNID/{nid} Missing NID API response body
# PUT /State/Components/{xname} Non-Existing Node API response code
# PUT /State/Components/{xname} Non-Existing Node API response body
# GET /State/Components/{xname} Node API response code
# GET /State/Components/{xname} Node API response body
# DELETE /State/Components API response code
# DELETE /State/Components API response body
# POST /State/Components NodeBMC API response code
# POST /State/Components NodeBMC API response body
# POST /State/Components NodeBMC Existing NodeBMC No Force API response code
# POST /State/Components NodeBMC Existing NodeBMC No Force API response body
# GET /State/Components/{xname} NodeBMC API response code
# GET /State/Components/{xname} NodeBMC API response body
# POST /State/Components NodeBMC Existing NodeBMC Force API response code
# POST /State/Components NodeBMC Existing NodeBMC Force API response body
# GET /State/Components/{xname} NodeBMC API response code
# GET /State/Components/{xname} NodeBMC API response body
# POST /State/Components Nodes API response code
# POST /State/Components Nodes API response body
# POST /State/Components NodeEnclosure API response code
# POST /State/Components NodeEnclosure API response body
# POST /State/Components RouterBMC and RouterModule API response code
# POST /State/Components RouterBMC and RouterModule API response body
# POST /State/Components Chassis and ChassisBMC API response code
# POST /State/Components Chassis and ChassisBMC API response body
# POST /State/Components HSNBoard and CabinetPDUController API response code
# POST /State/Components HSNBoard and CabinetPDUController API response body
# GET /State/Components?type={type} CabinetPDUController Parameter API response code
# GET /State/Components?type={type} CabinetPDUController Parameter API response body
# GET /State/Components?type={type} ChassisBMC Parameter API response code
# GET /State/Components?type={type} ChassisBMC Parameter API response body
# GET /State/Components?type={type} Chassis Parameter API response code
# GET /State/Components?type={type} Chassis Parameter API response body
# GET /State/Components?type={type} HSNBoard Parameter API response code
# GET /State/Components?type={type} HSNBoard Parameter API response body
# GET /State/Components?type={type} NodeBMC Parameter API response code
# GET /State/Components?type={type} NodeBMC Parameter API response body
# GET /State/Components?type={type} NodeEnclosure Parameter API response code
# GET /State/Components?type={type} NodeEnclosure Parameter API response body
# GET /State/Components?type={type} Node Parameter API response code
# GET /State/Components?type={type} Node Parameter API response body
# GET /State/Components?type={type} RouterBMC Parameter API response code
# GET /State/Components?type={type} RouterBMC Parameter API response body
# GET /State/Components?type={type} RouterModule Parameter API response code
# GET /State/Components?type={type} RouterModule Parameter API response body
# GET /State/Components?state={state} Unknown Parameter StateOnly API response code
# GET /State/Components?state={state} Unknown Parameter StateOnly API response body
# GET /State/Components?state={state} Empty Parameter API response code
# GET /State/Components?state={state} Empty Parameter API response body
# GET /State/Components?state={state} Populated Parameter API response code
# GET /State/Components?state={state} Populated Parameter API response body
# GET /State/Components?state={state} Off Parameter API response code
# GET /State/Components?state={state} Off Parameter API response body
# GET /State/Components?state={state} On Parameter API response code
# GET /State/Components?state={state} On Parameter API response body
# GET /State/Components?state={state} Standby Parameter API response code
# GET /State/Components?state={state} Standby Parameter API response body
# GET /State/Components?state={state} Halt Parameter API response code
# GET /State/Components?state={state} Halt Parameter API response body
# GET /State/Components?state={state} Ready Parameter API response code
# GET /State/Components?state={state} Ready Parameter API response body
# GET /State/Components?flag={flag} OK Parameter FlagOnly API response code
# GET /State/Components?flag={flag} OK Parameter FlagOnly API response body
# GET /State/Components?flag={flag} Warning Parameter API response code
# GET /State/Components?flag={flag} Warning Parameter API response body
# GET /State/Components?flag={flag} Alert Parameter API response code
# GET /State/Components?flag={flag} Alert Parameter API response body
# GET /State/Components?flag={flag} Locked Parameter API response code
# GET /State/Components?flag={flag} Locked Parameter API response body
# GET /State/Components?role={role} Compute Parameter RoleOnly API response code
# GET /State/Components?role={role} Compute Parameter RoleOnly API response body
# GET /State/Components?role={role} Service Parameter API response code
# GET /State/Components?role={role} Service Parameter API response body
# GET /State/Components?role={role} System Parameter API response code
# GET /State/Components?role={role} System Parameter API response body
# GET /State/Components?role={role} Application Parameter API response code
# GET /State/Components?role={role} Application Parameter API response body
# GET /State/Components?role={role} Storage Parameter API response code
# GET /State/Components?role={role} Storage Parameter API response body
# GET /State/Components?role={role} Management Parameter API response code
# GET /State/Components?role={role} Management Parameter API response body
# GET /State/Components?subrole={subrole} Master Parameter API response code
# GET /State/Components?subrole={subrole} Master Parameter API response body
# GET /State/Components?subrole={subrole} Worker Parameter API response code
# GET /State/Components?subrole={subrole} Worker Parameter API response body
# GET /State/Components?subrole={subrole} Storage Parameter API response code
# GET /State/Components?subrole={subrole} Storage Parameter API response body
# GET /State/Components?enabled={enabled} True Parameter API response code
# GET /State/Components?enabled={enabled} True Parameter API response body
# GET /State/Components?enabled={enabled} False Parameter API response code
# GET /State/Components?enabled={enabled} False Parameter API response body
# GET /State/Components?softwarestatus={softwarestatus} TestStatus Parameter API response code
# GET /State/Components?softwarestatus={softwarestatus} TestStatus Parameter API response body
# GET /State/Components?arch={arch} X86 Parameter API response code
# GET /State/Components?arch={arch} X86 Parameter API response body
# GET /State/Components?arch={arch} ARM Parameter API response code
# GET /State/Components?arch={arch} ARM Parameter API response body
# GET /State/Components?arch={arch} Other Parameter API response code
# GET /State/Components?arch={arch} Other Parameter API response body
# GET /State/Components?class={class} River Parameter API response code
# GET /State/Components?class={class} River Parameter API response body
# GET /State/Components?class={class} Mountain Parameter API response code
# GET /State/Components?class={class} Mountain Parameter API response body
# GET /State/Components?class={class} Hill Parameter API response code
# GET /State/Components?class={class} Hill Parameter API response body
# GET /State/Components?nid={nid} NID NidOnly Parameter API response code
# GET /State/Components?nid={nid} NID NidOnly Parameter API response body
# GET /State/Components?nid_start={nid_start} NID_Start Parameter API response code
# GET /State/Components?nid_start={nid_start} NID_Start Parameter API response body
# GET /State/Components?nid_start={nid_start}&nid_end={nid_end} NID_Start NID_End Parameters API response code
# GET /State/Components?nid_start={nid_start}&nid_end={nid_end} NID_Start NID_End Parameters API response body
# GET /State/Components Many Parameters Existing Node API response code
# GET /State/Components Many Parameters Existing Node API response body
# POST /State/Components/Query Existing Component API response code
# POST /State/Components/Query Existing Component API response body
# POST /State/Components/Query Type Node Existing Component API response code
# POST /State/Components/Query Type Node Existing Component API response body
# POST /State/Components/Query State Ready StateOnly Existing Component API response code
# POST /State/Components/Query State Ready StateOnly Existing Component API response body
# POST /State/Components/Query Flag OK FlagOnly Existing Component API response code
# POST /State/Components/Query Flag OK FlagOnly Existing Component API response body
# POST /State/Components/Query Enabled True Existing Component API response code
# POST /State/Components/Query Enabled True Existing Component API response body
# POST /State/Components/Query SoftwareStatus Existing Component API response code
# POST /State/Components/Query SoftwareStatus Existing Component API response body
# POST /State/Components/Query Role Compute RoleOnly Existing Component API response code
# POST /State/Components/Query Role Compute RoleOnly Existing Component API response body
# POST /State/Components/Query SubRole Master Existing Component API response code
# POST /State/Components/Query SubRole Master Existing Component API response body
# POST /State/Components/Query Arch X86 Existing Component API response code
# POST /State/Components/Query Arch X86 Existing Component API response body
# POST /State/Components/Query Class River Existing Component API response code
# POST /State/Components/Query Class River Existing Component API response body
# POST /State/Components/Query NID NidOnly Existing Component API response code
# POST /State/Components/Query NID NidOnly Existing Component API response body
# POST /State/Components/Query NID_Start Existing Component API response code
# POST /State/Components/Query NID_Start Existing Component API response body
# POST /State/Components/Query NID_Start NID_End Existing Component API response code
# POST /State/Components/Query NID_Start NID_End Existing Component API response body
# POST /State/Components/Query Many Parameters Existing Node API response code
# POST /State/Components/Query Many Parameters Existing Node API response body
# POST /State/Components/ByNID/Query Existing Component API response code
# POST /State/Components/ByNID/Query Existing Component API response body
# POST /State/Components/ByNID/Query Type Node Existing Component API response code
# POST /State/Components/ByNID/Query Type Node Existing Component API response body
# POST /State/Components/ByNID/Query State Ready StateOnly Existing Component API response code
# POST /State/Components/ByNID/Query State Ready StateOnly Existing Component API response body
# POST /State/Components/ByNID/Query Flag OK FlagOnly Existing Component API response code
# POST /State/Components/ByNID/Query Flag OK FlagOnly Existing Component API response body
# POST /State/Components/ByNID/Query Enabled True Existing Component API response code
# POST /State/Components/ByNID/Query Enabled True Existing Component API response body
# POST /State/Components/ByNID/Query SoftwareStatus Existing Component API response code
# POST /State/Components/ByNID/Query SoftwareStatus Existing Component API response body
# POST /State/Components/ByNID/Query Role Compute RoleOnly Existing Component API response code
# POST /State/Components/ByNID/Query Role Compute RoleOnly Existing Component API response body
# POST /State/Components/ByNID/Query SubRole Master Existing Component API response code
# POST /State/Components/ByNID/Query SubRole Master Existing Component API response body
# POST /State/Components/ByNID/Query Arch X86 Existing Component API response code
# POST /State/Components/ByNID/Query Arch X86 Existing Component API response body
# POST /State/Components/ByNID/Query Class River Existing Component API response code
# POST /State/Components/ByNID/Query Class River Existing Component API response body
# POST /State/Components/ByNID/Query NID NidOnly Existing Component API response code
# POST /State/Components/ByNID/Query NID NidOnly Existing Component API response body
# POST /State/Components/ByNID/Query NID_Start Existing Component API response code
# POST /State/Components/ByNID/Query NID_Start Existing Component API response body
# POST /State/Components/ByNID/Query Many Parameters Existing Node API response code
# POST /State/Components/ByNID/Query Many Parameters Existing Node API response body
# GET /State/Components/Query/{xname} Existing Component API response code
# GET /State/Components/Query/{xname} Existing Component API response body
# GET /State/Components/Query/{xname} Type Node Existing Component API response code
# GET /State/Components/Query/{xname} Type Node Existing Component API response body
# GET /State/Components/Query/{xname} State Ready StateOnly Existing Component API response code
# GET /State/Components/Query/{xname} State Ready StateOnly Existing Component API response body
# GET /State/Components/Query/{xname} Flag OK FlagOnly Existing Component API response code
# GET /State/Components/Query/{xname} Flag OK FlagOnly Existing Component API response body
# GET /State/Components/Query/{xname} Enabled True Existing Component API response code
# GET /State/Components/Query/{xname} Enabled True Existing Component API response body
# GET /State/Components/Query/{xname} SoftwareStatus Existing Component API response code
# GET /State/Components/Query/{xname} SoftwareStatus Existing Component API response body
# GET /State/Components/Query/{xname} Role Compute RoleOnly Existing Component API response code
# GET /State/Components/Query/{xname} Role Compute RoleOnly Existing Component API response body
# GET /State/Components/Query/{xname} SubRole Master Existing Component API response code
# GET /State/Components/Query/{xname} SubRole Master Existing Component API response body
# GET /State/Components/Query/{xname} Arch X86 Existing Component API response code
# GET /State/Components/Query/{xname} Arch X86 Existing Component API response body
# GET /State/Components/Query/{xname} Class River Existing Component API response code
# GET /State/Components/Query/{xname} Class River Existing Component API response body
# GET /State/Components/Query/{xname} NID NidOnly Existing Component API response code
# GET /State/Components/Query/{xname} NID NidOnly Existing Component API response body
# GET /State/Components/Query/{xname} NID_Start Existing Component API response code
# GET /State/Components/Query/{xname} NID_Start Existing Component API response body
# GET /State/Components/Query/{xname} NID_Start NID_End Existing Component API response code
# GET /State/Components/Query/{xname} NID_Start NID_End Existing Component API response body
# GET /State/Components/Query/{xname} Many Parameters Existing Node API response code
# GET /State/Components/Query/{xname} Many Parameters Existing Node API response body
# GET /State/Components/ByNID/{nid} Existing NodeA API response code
# GET /State/Components/ByNID/{nid} Existing NodeA API response body
# GET /State/Components/ByNID/{nid} Exisitng NodeB API response code
# GET /State/Components/ByNID/{nid} Existing NodeB API response body
# POST /State/Components Nodes For Bulk Updates API response code
# POST /State/Components Nodes For Bulk Updates API response body
# PATCH /State/Components/BulkStateData Nodes State Flag API response code
# PATCH /State/Components/BulkStateData Nodes State Flag API response body
# GET /State/Components/{xname} Updated BulkStateData NodeA API response code
# GET /State/Components/{xname} Updated BulkStateData NodeA API response body
# GET /State/Components/{xname} Updated BulkStateData NodeB API response code
# GET /State/Components/{xname} Updated BulkStateData NodeB API response body
# GET /State/Components/{xname} Non-Updated BulkStateData Node API response code
# GET /State/Components/{xname} Non-Updated BulkStateData Node API response body
# PATCH /State/Components/{xname}/StateData Node State No Flag API response code
# PATCH /State/Components/{xname}/StateData Node State No Flag API response body
# GET /State/Components?stateonly=True Updated Node API response code
# GET /State/Components?stateonly=True Updated Node API response body
# GET /State/Components?flagonly=True Updated Node API response code
# GET /State/Components?flagonly=True Updated Node API response body
# GET /State/Components?roleonly=True Updated Node API response code
# GET /State/Components?roleonly=True Updated Node API response body
# GET /State/Components?nidonly=True Updated Node API response code
# GET /State/Components?nidonly=True Updated Node API response body
# PATCH /State/Components/BulkFlagOnly Nodes API response code
# PATCH /State/Components/BulkFlagOnly Nodes API response body
# GET /State/Components/{xname} Updated BulkFlagOnly NodeA API response code
# GET /State/Components/{xname} Updated BulkFlagOnly NodeA API response body
# GET /State/Components/{xname} Updated BulkFlagOnly NodeB API response code
# GET /State/Components/{xname} Updated BulkFlagOnly NodeB API response body
# GET /State/Components/{xname} Non-Updated BulkFlagOnly Node API response code
# GET /State/Components/{xname} Non-Updated BulkFlagOnly Node API response body
# PATCH /State/Components/{xname}/FlagOnly Node API response code
# PATCH /State/Components/{xname}/FlagOnly Node API response body
# GET /State/Components?flagonly=True Updated Node API response code
# GET /State/Components?flagonly=True Updated Node API response body
# PATCH /State/Components/BulkEnabled Nodes API response code
# PATCH /State/Components/BulkEnabled Nodes API response body
# GET /State/Components/{xname} Updated BulkEnabled NodeA API response code
# GET /State/Components/{xname} Updated BulkEnabled NodeA API response body
# GET /State/Components/{xname} Updated BulkEnabled NodeB API response code
# GET /State/Components/{xname} Updated BulkEnabled NodeB API response body
# GET /State/Components/{xname} Non-Updated BulkEnabled Node API response code
# GET /State/Components/{xname} Non-Updated BulkEnabled Node API response body
# PATCH /State/Components/{xname}/Enabled Node API response code
# PATCH /State/Components/{xname}/Enabled Node API response body
# GET /State/Components/{xname} Updated Enabled Node API response code
# GET /State/Components/{xname} Updated Enabled Node API response body
# PATCH /State/Components/BulkSoftwareStatus Nodes API response code
# PATCH /State/Components/BulkSoftwareStatus Nodes API response body
# GET /State/Components/{xname} Updated BulkSoftwareStatus NodeA API response code
# GET /State/Components/{xname} Updated BulkSoftwareStatus NodeA API response body
# GET /State/Components/{xname} Updated BulkSoftwareStatus NodeB API response code
# GET /State/Components/{xname} Updated BulkSoftwareStatus NodeB API response body
# GET /State/Components/{xname} Non-Updated BulkSoftwareStatus Node API response code
# GET /State/Components/{xname} Non-Updated BulkSoftwareStatus Node API response body
# PATCH /State/Components/{xname}/SoftwareStatus Node API response code
# PATCH /State/Components/{xname}/SoftwareStatus Node API response body
# GET /State/Components/{xname} Updated SoftwareStatus Node API response code
# GET /State/Components/{xname} Updated SoftwareStatus Node API response body
# PATCH /State/Components/BulkRole Nodes API response code
# PATCH /State/Components/BulkRole Nodes API response body
# GET /State/Components/{xname} Updated BulkRole NodeA API response code
# GET /State/Components/{xname} Updated BulkRole NodeA API response body
# GET /State/Components/{xname} Updated BulkRole NodeB API response code
# GET /State/Components/{xname} Updated BulkRole NodeB API response body
# GET /State/Components/{xname} Non-Updated BulkRole Node API response code
# GET /State/Components/{xname} Non-Updated BulkRole Node API response body
# PATCH /State/Components/{xname}/Role Node API response code
# PATCH /State/Components/{xname}/Role Node API response body
# GET /State/Components/{xname} Updated Role Node API response code
# GET /State/Components/{xname} Updated Role Node API response body
# PATCH /State/Components/BulkNID Nodes API response code
# PATCH /State/Components/BulkNID Nodes API response body
# GET /State/Components/{xname} Updated BulkNID NodeA API response code
# GET /State/Components/{xname} Updated BulkNID NodeA API response body
# GET /State/Components/{xname} Updated BulkNID NodeB API response code
# GET /State/Components/{xname} Updated BulkNID NodeB API response body
# GET /State/Components/{xname} Non-Updated BulkNID Node API response code
# GET /State/Components/{xname} Non-Updated BulkNID Node API response body
# PATCH /State/Components/{xname}/NID Node API response code
# PATCH /State/Components/{xname}/NID Node API response body
# GET /State/Components/{xname} Updated NID Node API response code
# GET /State/Components/{xname} Updated NID Node API response body
# DELETE /State/Components API response code
# DELETE /State/Components API response body
---
test_name: hsmAPIstateComponentsDestructive

stages:
  - name: Get access token
    request:
      url: "{opaal_base_url}/token"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          access_token: access_token

  # DELETE /State/Components API response code
  # DELETE /State/Components API response body
  - name: hsmAPIstateComponentsDELETE - Remove all Components using DELETE.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code:
        - 200
        - 404

  # DELETE /State/Components No Components API response code
  # DELETE /State/Components No Components API response body
  - name: hsmAPIstateComponentsDELETEnoComponents - Attempt to remove all Components using DELETE when none are present.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "no entries to delete"
              status:
                type: int
                required: True
                enum:
                  - 404

  # GET /State/Components No Components API response code
  # GET /State/Components No Components API response body
  - name: hsmAPIstateComponentsGETnoComponents - Retrieve an empty set of Components using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      json:
        Components: !anything

  # POST /State/Components Node API response code
  # POST /State/Components Node API response body
  - name: hsmAPIstateComponentsPOSTnode - Create a Node Component using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b9n9","Type":"Node","State":"On","Flag":"OK","Enabled":true,"SoftwareStatus":"AdminStatus","Role":"Compute","NID":9999999999,"NetType":"Sling","Arch":"X86","Class":"River"}],"Force":false}
    response:
      status_code: 204

  # GET /State/Components API response code
  # GET /State/Components API response body
  - name: hsmAPIstateComponentsGET - Retrieve all Components using GET after a Node Component has been created.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      json:
        Components: !anything

  # GET /State/Components?id={id} Node Parameter API response code
  # GET /State/Components?id={id} Node Parameter API response body
  - name: hsmAPIstateComponentsGETidParamNode - Retrieve a specific Node Component using the ID query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?id=x9999c7s9b9n9"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n9"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "On"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "AdminStatus"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999999
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # PUT /State/Components/{xname} Existing Node No Force API response code
  # PUT /State/Components/{xname} Existing Node No Force API response body
  - name: hsmAPIstateComponentsPUTnodeExistsNoForce - Update an existing Node Component using PUT without the force option.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: PUT
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Component":{"ID":"x9999c7s9b9n9","Type":"Node","State":"Standby","Flag":"Alert","Enabled":true,"SoftwareStatus":"AdminStatus","Role":"Compute","NID":9999999999,"NetType":"Infiniband","Arch":"ARM","Class":"River"},"Force":false}
    response:
      status_code: 204

  # GET /State/Components/{xname} Node API response code
  # GET /State/Components/{xname} Node API response body
  - name: hsmAPIstateComponentsGETxnameNode - Retrieve the updated Node Component using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b9n9"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "On"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "AdminStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              NID:
                type: int
                required: True
                enum:
                  - 9999999999
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # PUT /State/Components/{xname} Existing Node Force API response code
  # PUT /State/Components/{xname} Existing Node Force API response body
  - name: hsmAPIstateComponentsPUTnodeExistsForce - Update an existing Node Component using PUT with the force option.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: PUT
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Component":{"ID":"x9999c7s9b9n9","Type":"Node","State":"Standby","Flag":"Alert","Enabled":true,"SoftwareStatus":"AdminStatus","Role":"Compute","NID":9999999999,"NetType":"Infiniband","Arch":"ARM","Class":"River"},"Force":true}
    response:
      status_code: 204

  # GET /State/Components/{xname} Node API response code
  # GET /State/Components/{xname} Node API response body
  - name: hsmAPIstateComponentsGETxnameNode - Retrieve the updated Node Component using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b9n9"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Alert"
              Enabled:
                type: bool
                required: True
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "AdminStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              NID:
                type: int
                required: True
                enum:
                  - 9999999999
              NetType:
                type: str
                required: True
                enum:
                  - "Infiniband"
              Arch:
                type: str
                required: True
                enum:
                  - "ARM"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # DELETE /State/Components/{xname} Node API response code
  # DELETE /State/Components/{xname} Node API response body
  - name: hsmAPIstateComponentsDELETExname - Remove a specific Node Component using DELETE.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              code:
                type: int
                required: True
                enum:
                  - 0
              message:
                type: str
                required: True
                enum:
                  - "deleted 1 entry"

  # DELETE /State/Components/{xname} Missing Node API response code
  # DELETE /State/Components/{xname} Missing Node API response body
  - name: hsmAPIstateComponentsDELETExnameMissing - Attempt to remove a specific Node Component that doesn't exist using DELETE.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "no such xname."
              status:
                type: int
                required: True
                enum:
                  - 404

  # GET /State/Components/{xname} Missing Node API response code
  # GET /State/Components/{xname} Missing Node API response body
  - name: hsmAPIstateComponentsGETidMissingNode - Attempt to retrieve a specific Node Component that doesn't exist using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "no such xname."
              status:
                type: int
                required: True
                enum:
                  - 404

  # GET /State/Components/ByNID/{nid} Missing NID API response code
  # GET /State/Components/ByNID/{nid} Missing NID API response body
  - name: hsmAPIstateComponentsByNidGETmissingNid - Attempt to retrieve a specific Node Component by NID that doesn't exist using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/9999999999"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              type:
                type: str
                required: True
                enum:
                  - "about:blank"
              title:
                type: str
                required: True
                enum:
                  - "Not Found"
              detail:
                type: str
                required: True
                enum:
                  - "no such NID."
              status:
                type: int
                required: True
                enum:
                  - 404

  # PUT /State/Components/{xname} Non-Existing Node API response code
  # PUT /State/Components/{xname} Non-Existing Node API response body
  - name: hsmAPIstateComponentsPUTdoesntExistNoForce - Create a Component using PUT for a Node that doesn't already exist.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: PUT
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Component":{"ID":"x9999c7s9b9n9","Type":"Node","State":"Ready","Flag":"OK","Enabled":true,"SoftwareStatus":"AdminStatus","Role":"Compute","NID":9999999999,"NetType":"Ethernet","Arch":"Other","Class":"River"},"Force":false}
    response:
      status_code: 204

  # GET /State/Components/{xname} Node API response code
  # GET /State/Components/{xname} Node API response body
  - name: hsmAPIstateComponentsGETxnameNode - Retrieve the Node Component using GET that was created by the previous PUT.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9n9"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b9n9"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Ready"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "AdminStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              NID:
                type: int
                required: True
                enum:
                  - 9999999999
              NetType:
                type: str
                required: True
                enum:
                  - "Ethernet"
              Arch:
                type: str
                required: True
                enum:
                  - "Other"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # DELETE /State/Components API response code
  # DELETE /State/Components API response body
  - name: hsmAPIstateComponentsDELETE - Remove all Components again using DELETE.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              code:
                type: int
                required: True
                enum:
                  - 0
              message:
                type: str
                required: True
                enum:
                  - "deleted 1 entries"

  # POST /State/Components NodeBMC API response code
  # POST /State/Components NodeBMC API response body
  - name: hsmAPIstateComponentsPOSTnodeBMC - Create a NodeBMC Component using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b9","Type":"NodeBMC","State":"Ready","Flag":"OK","Enabled":true,"Role":"Management","NetType":"Sling","Arch":"X86","Class":"River","Locked":false}],"Force":false}
    response:
      status_code: 204

  # POST /State/Components NodeBMC Existing NodeBMC No Force API response code
  # POST /State/Components NodeBMC Existing NodeBMC No Force API response body
  - name: hsmAPIstateComponentsPOSTnodeBMCexistsNoForce - Attempt to create a different NodeBMC Component using POST with an existing ID without the force option.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b9","Type":"NodeBMC","State":"Off","Flag":"Warning","Enabled":false,"Role":"Management","NetType":"Infiniband","Arch":"ARM","Class":"Mountain","Locked":true}],"Force":false}
    response:
      status_code: 204

  # GET /State/Components/{xname} NodeBMC API response code
  # GET /State/Components/{xname} NodeBMC API response body
  - name: hsmAPIstateComponentsGETxnameNodeBMC - Retrieve the NodeBMC Component using GET and verify it was not overwritten by the previous POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b9"
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              State:
                type: str
                required: True
                enum:
                  - "Ready"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
              Role:
                type: str
                required: True
                enum:
                  - "Management"
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # POST /State/Components NodeBMC Existing NodeBMC Force API response code
  # POST /State/Components NodeBMC Existing NodeBMC Force API response body
  - name: hsmAPIstateComponentsPOSTnodeBMCexistsForce - Create a different NodeBMC Component using POST with an existing ID and the force option.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b9","Type":"NodeBMC","State":"Off","Flag":"Warning","Enabled":false,"Role":"Management","NetType":"Infiniband","Arch":"ARM","Class":"Mountain","Locked":true}],"Force":true}
    response:
      status_code: 204

  # GET /State/Components/{xname} NodeBMC API response code
  # GET /State/Components/{xname} NodeBMC API response body
  - name: hsmAPIstateComponentsGETxnameNodeBMC - Retrieve the NodeBMC Component using GET and verify it was overwritten by the previous POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b9"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b9"
              Type:
                type: str
                required: True
                enum:
                  - "NodeBMC"
              State:
                type: str
                required: True
                enum:
                  - "Off"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
              Role:
                type: str
                required: True
                enum:
                  - "Management"
              NetType:
                type: str
                required: True
                enum:
                  - "Infiniband"
              Arch:
                type: str
                required: True
                enum:
                  - "ARM"
              Class:
                type: str
                required: True
                enum:
                  - "Mountain"

  # POST /State/Components Nodes API response code
  # POST /State/Components Nodes API response body
  - name: hsmAPIstateComponentsPOSTnodes - Create multiple Node Components with a variety of valid field values using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b9n8","Type":"Node","State":"Unknown","Flag":"Unknown","Enabled":true,"SoftwareStatus":"TestStatus8","Role":"Compute","SubRole":"Master","NID":9999999998,"NetType":"Sling","Arch":"X86","Class":"River"},{"ID":"x9999c7s9b9n7","Type":"Node","State":"Empty","Flag":"OK","Enabled":true,"SoftwareStatus":"TestStatus7","Role":"Service","SubRole":"Worker","NID":9999999997,"NetType":"Infiniband","Arch":"X86","Class":"River"},{"ID":"x9999c7s9b9n6","Type":"Node","State":"Populated","Flag":"Warning","Enabled":true,"SoftwareStatus":"TestStatus6","Role":"System","SubRole":"Storage","NID":9999999996,"NetType":"Ethernet","Arch":"ARM","Class":"River"},{"ID":"x9999c7s9b9n5","Type":"Node","State":"Off","Flag":"Warn","Enabled":true,"SoftwareStatus":"TestStatus5","Role":"Application","SubRole":"Master","NID":9999999995,"NetType":"OEM","Arch":"ARM","Class":"Mountain"},{"ID":"x9999c7s9b9n4","Type":"Node","State":"On","Flag":"Alert","Enabled":false,"SoftwareStatus":"TestStatus4","Role":"Storage","SubRole":"Worker","NID":9999999994,"NetType":"None","Arch":"Other","Class":"Mountain"},{"ID":"x9999c7s9b9n3","Type":"Node","State":"Standby","Flag":"Locked","Enabled":false,"SoftwareStatus":"TestStatus3","Role":"Management","SubRole":"Storage","NID":9999999993,"NetType":"Sling","Arch":"Other","Class":"Mountain"},{"ID":"x9999c7s9b9n2","Type":"Node","State":"Halt","Flag":"OK","Enabled":false,"SoftwareStatus":"TestStatus2","Role":"Compute","SubRole":"Master","NID":9999999992,"NetType":"Sling","Arch":"Unknown","Class":"Hill"},{"ID":"x9999c7s9b9n1","Type":"Node","State":"Ready","Flag":"OK","Enabled":false,"SoftwareStatus":"TestStatus1","Role":"Compute","SubRole":"Worker","NID":9999999991,"NetType":"Sling","Arch":"Unknown","Class":"Hill"},{"ID":"x9999c7s9b9n0","Type":"Node","State":"Ready","Flag":"OK","Enabled":true,"SoftwareStatus":"TestStatus0","Role":"Compute","SubRole":"Storage","NID":9999999990,"NetType":"Sling","Arch":"X86","Class":"Hill"}],"Force":false}
    response:
      status_code: 204

  # POST /State/Components NodeEnclosure API response code
  # POST /State/Components NodeEnclosure API response body
  - name: hsmAPIstateComponentsPOSTnodeEnclosure - Create a NodeEnclosure Component using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9e9","Type":"NodeEnclosure","State":"On","Flag":"OK","Enabled":false,"NetType":"Sling","Arch":"X86","Class":"Mountain"}],"Force":false}
    response:
      status_code: 204

  # POST /State/Components RouterBMC and RouterModule API response code
  # POST /State/Components RouterBMC and RouterModule API response body
  - name: hsmAPIstateComponentsPOSTrouterBMCandRouterModule - Create RouterBMC and RouterModule Components using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7r9b9","Type":"RouterBMC","State":"Ready","Flag":"OK","Enabled":true,"NetType":"Sling","Arch":"X86","Class":"Mountain"},{"ID":"x9999c7r9","Type":"RouterModule","State":"Empty","Flag":"OK","Enabled":true,"NetType":"Sling","Arch":"X86","Class":"Mountain"}],"Force":false}
    response:
      status_code: 204

  # POST /State/Components Chassis and ChassisBMC API response code
  # POST /State/Components Chassis and ChassisBMC API response body
  - name: hsmAPIstateComponentsPOSTchassisAndChassisBMC - Create Chassis and ChassisBMC Components using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7","Type":"Chassis","State":"Off","Flag":"OK","Enabled":true,"NetType":"Sling","Arch":"X86","Class":"Mountain"},{"ID":"x9999c7b0","Type":"ChassisBMC","State":"Ready","Flag":"OK","Enabled":true,"NetType":"Sling","Arch":"X86","Class":"Mountain"}],"Force":false}
    response:
      status_code: 204

  # POST /State/Components HSNBoard and CabinetPDUController API response code
  # POST /State/Components HSNBoard and CabinetPDUController API response body
  - name: hsmAPIstateComponentsPOSThsnBoardandCabinetPDUController - Create HSNBoard and CabinetPDUController Components using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7r9e9","Type":"HSNBoard","State":"On","Flag":"Warning","Enabled":false,"NetType":"Sling","Arch":"X86","Class":"River"},{"ID":"x9999m3","Type":"CabinetPDUController","State":"Ready","Flag":"OK","Enabled":true,"NetType":"Infiniband","Arch":"X86"}],"Force":false}
    response:
      status_code: 204

  # GET /State/Components?type={type} CabinetPDUController Parameter API response code
  # GET /State/Components?type={type} CabinetPDUController Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamCabinetPDUController - Retrieve the CabinetPDUController Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=CabinetPDUController"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999m3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "CabinetPDUController"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Infiniband"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"

  # GET /State/Components?type={type} ChassisBMC Parameter API response code
  # GET /State/Components?type={type} ChassisBMC Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamChassisBMC - Retrieve the ChassisBMC Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=ChassisBMC"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7b0"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "ChassisBMC"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?type={type} Chassis Parameter API response code
  # GET /State/Components?type={type} Chassis Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamChassis - Retrieve the Chassis Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Chassis"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Chassis"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Off"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?type={type} HSNBoard Parameter API response code
  # GET /State/Components?type={type} HSNBoard Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamHSNBoard - Retrieve the HSNBoard Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=HSNBoard"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7r9e9"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "HSNBoard"
                      State:
                        type: str
                        required: True
                        enum:
                          - "On"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components?type={type} NodeBMC Parameter API response code
  # GET /State/Components?type={type} NodeBMC Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamNodeBMC - Retrieve the NodeBMC Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeBMC"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "NodeBMC"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Off"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Management"
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Infiniband"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?type={type} NodeEnclosure Parameter API response code
  # GET /State/Components?type={type} NodeEnclosure Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamNodeEnclosure - Retrieve the NodeEnclosure Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=NodeEnclosure"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9e9"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "NodeEnclosure"
                      State:
                        type: str
                        required: True
                        enum:
                          - "On"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?type={type} Node Parameter API response code
  # GET /State/Components?type={type} Node Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamNode - Retrieve the Node Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=Node"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        pattern: "^x([0-9]{{1,4}})c([0-7])s([0-9]+)b([0-9]+)n([0-9]+)$"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: True
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components?type={type} RouterBMC Parameter API response code
  # GET /State/Components?type={type} RouterBMC Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamRouterBMC - Retrieve the RouterBMC Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=RouterBMC"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7r9b9"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "RouterBMC"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?type={type} RouterModule Parameter API response code
  # GET /State/Components?type={type} RouterModule Parameter API response body
  - name: hsmAPIstateComponentsGETtypeParamRouterModule - Retrieve the RouterModule Component using GET and the type query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?type=RouterModule"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7r9"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "RouterModule"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Empty"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?state={state} Unknown Parameter StateOnly API response code
  # GET /State/Components?state={state} Unknown Parameter StateOnly API response body
  - name: hsmAPIstateComponentsGETstateParamUnknownStateOnly - Retrieve Unknown Components using GET and the state query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=Unknown&stateonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"

  # GET /State/Components?state={state} Empty Parameter API response code
  # GET /State/Components?state={state} Empty Parameter API response body
  - name: hsmAPIstateComponentsGETstateParamEmpty - Retrieve Empty Components using GET and the state query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=Empty"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                        enum:
                          - "Empty"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True

  # GET /State/Components?state={state} Populated Parameter API response code
  # GET /State/Components?state={state} Populated Parameter API response body
  - name: hsmAPIstateComponentsGETstateParamPopulated - Retrieve Populated Components using GET and the state query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=Populated"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus6"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Ethernet"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components?state={state} Off Parameter API response code
  # GET /State/Components?state={state} Off Parameter API response body
  - name: hsmAPIstateComponentsGETstateParamOff - Retrieve Off Components using GET and the state query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=Off"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                        enum:
                          - "Off"
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?state={state} On Parameter API response code
  # GET /State/Components?state={state} On Parameter API response body
  - name: hsmAPIstateComponentsGETstateParamOn - Retrieve On Components using GET and the state query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=On"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                        enum:
                          - "On"
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components?state={state} Standby Parameter API response code
  # GET /State/Components?state={state} Standby Parameter API response body
  - name: hsmAPIstateComponentsGETstateParamStandby - Retrieve Standby Components using GET and the state query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=Standby"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Standby"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Locked"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus3"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Management"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999993
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "Other"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?state={state} Halt Parameter API response code
  # GET /State/Components?state={state} Halt Parameter API response body
  - name: hsmAPIstateComponentsGETstateParamHalt - Retrieve Halt Components using GET and the state query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=Halt"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n2"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Halt"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus2"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999992
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "UNKNOWN"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Hill"

  # GET /State/Components?state={state} Ready Parameter API response code
  # GET /State/Components?state={state} Ready Parameter API response body
  - name: hsmAPIstateComponentsGETstateParamReady - Retrieve Ready Components using GET and the state query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?state=Ready"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: False

  # GET /State/Components?flag={flag} OK Parameter FlagOnly API response code
  # GET /State/Components?flag={flag} OK Parameter FlagOnly API response body
  - name: hsmAPIstateComponentsGETflagParamOKflagOnly - Retrieve OK Components using GET and the flag query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?flag=OK&flagonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # GET /State/Components?flag={flag} Warning Parameter API response code
  # GET /State/Components?flag={flag} Warning Parameter API response body
  - name: hsmAPIstateComponentsGETflagParamWarning - Retrieve Warning Components using GET and the flag query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?flag=Warning"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components?flag={flag} Alert Parameter API response code
  # GET /State/Components?flag={flag} Alert Parameter API response body
  - name: hsmAPIstateComponentsGETflagParamAlert - Retrieve Alert Components using GET and the flag query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?flag=Alert"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n4"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "On"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Alert"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus4"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Worker"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999994
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "None"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "Other"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?flag={flag} Locked Parameter API response code
  # GET /State/Components?flag={flag} Locked Parameter API response body
  - name: hsmAPIstateComponentsGETflagParamLocked - Retrieve Locked Components using GET and the flag query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?flag=Locked"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Standby"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Locked"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus3"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Management"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999993
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "Other"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?role={role} Compute Parameter RoleOnly API response code
  # GET /State/Components?role={role} Compute Parameter RoleOnly API response body
  - name: hsmAPIstateComponentsGETroleParamComputeRoleOnly - Retrieve Compute Components using GET and the role query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?role=Compute&roleonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True

  # GET /State/Components?role={role} Service Parameter API response code
  # GET /State/Components?role={role} Service Parameter API response body
  - name: hsmAPIstateComponentsGETroleParamService - Retrieve Service Components using GET and the role query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?role=Service"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Empty"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus7"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Service"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Worker"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999997
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Infiniband"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components?role={role} System Parameter API response code
  # GET /State/Components?role={role} System Parameter API response body
  - name: hsmAPIstateComponentsGETroleParamSystem - Retrieve System Components using GET and the role query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?role=System"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus6"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Ethernet"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components?role={role} Application Parameter API response code
  # GET /State/Components?role={role} Application Parameter API response body
  - name: hsmAPIstateComponentsGETroleParamApplication - Retrieve Application Components using GET and the role query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?role=Application"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n5"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Off"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus5"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Application"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999995
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "OEM"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?role={role} Storage Parameter API response code
  # GET /State/Components?role={role} Storage Parameter API response body
  - name: hsmAPIstateComponentsGETroleParamStorage - Retrieve Storage Components using GET and the role query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?role=Storage"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n4"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "On"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Alert"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus4"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Worker"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999994
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "None"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "Other"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?role={role} Management Parameter API response code
  # GET /State/Components?role={role} Management Parameter API response body
  - name: hsmAPIstateComponentsGETroleParamManagement - Retrieve Management Components using GET and the role query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?role=Management"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Management"
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?subrole={subrole} Master Parameter API response code
  # GET /State/Components?subrole={subrole} Master Parameter API response body
  - name: hsmAPIstateComponentsGETsubroleParamMaster - Retrieve Master Components using GET and the subrole query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?subrole=Master"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components?subrole={subrole} Worker Parameter API response code
  # GET /State/Components?subrole={subrole} Worker Parameter API response body
  - name: hsmAPIstateComponentsGETsubroleParamWorker - Retrieve Worker Components using GET and the subrole query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?subrole=Worker"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Worker"
                      NID:
                        type: int
                        required: True
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components?subrole={subrole} Storage Parameter API response code
  # GET /State/Components?subrole={subrole} Storage Parameter API response body
  - name: hsmAPIstateComponentsGETsubroleParamStorage - Retrieve Storage Components using GET and the subrole query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?subrole=Storage"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components?enabled={enabled} True Parameter API response code
  # GET /State/Components?enabled={enabled} True Parameter API response body
  - name: hsmAPIstateComponentsGETenabledParamTrue - Retrieve Enabled Components using GET and the enabled query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?enabled=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: False

  # GET /State/Components?enabled={enabled} False Parameter API response code
  # GET /State/Components?enabled={enabled} False Parameter API response body
  - name: hsmAPIstateComponentsGETenabledParamFalse - Retrieve Disabled Components using GET and the enabled query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?enabled=False"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - false
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: False

  # GET /State/Components?softwarestatus={softwarestatus} TestStatus Parameter API response code
  # GET /State/Components?softwarestatus={softwarestatus} TestStatus Parameter API response body
  - name: hsmAPIstateComponentsGETsoftwarestatusParamTestStatus - Retrieve Components with a specific SoftwareStatus using GET and the softwarestatus query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?softwarestatus=TestStatus0"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n0"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus0"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999990
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Hill"

  # GET /State/Components?arch={arch} X86 Parameter API response code
  # GET /State/Components?arch={arch} X86 Parameter API response body
  - name: hsmAPIstateComponentsGETarchParamX86 - Retrieve X86 Components using GET and the arch query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?arch=X86"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: False

  # GET /State/Components?arch={arch} ARM Parameter API response code
  # GET /State/Components?arch={arch} ARM Parameter API response body
  - name: hsmAPIstateComponentsGETarchParamARM - Retrieve ARM Components using GET and the arch query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?arch=ARM"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: False

  # GET /State/Components?arch={arch} Other Parameter API response code
  # GET /State/Components?arch={arch} Other Parameter API response body
  - name: hsmAPIstateComponentsGETarchParamOther - Retrieve Other Components using GET and the arch query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?arch=Other"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "Other"
                      Class:
                        type: str
                        required: False

  # GET /State/Components?class={class} River Parameter API response code
  # GET /State/Components?class={class} River Parameter API response body
  - name: hsmAPIstateComponentsGETclassParamRiver - Retrieve River Components using GET and the class query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?class=River"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components?class={class} Mountain Parameter API response code
  # GET /State/Components?class={class} Mountain Parameter API response body
  - name: hsmAPIstateComponentsGETclassParamMountain - Retrieve Mountain Components using GET and the class query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?class=Mountain"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components?class={class} Hill Parameter API response code
  # GET /State/Components?class={class} Hill Parameter API response body
  - name: hsmAPIstateComponentsGETclassParamHill - Retrieve Hill Components using GET and the class query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?class=Hill"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                      Type:
                        type: str
                        required: True
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: False
                      Role:
                        type: str
                        required: False
                      SubRole:
                        type: str
                        required: False
                      NID:
                        type: int
                        required: False
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Hill"

  # GET /State/Components?nid={nid} NID NidOnly Parameter API response code
  # GET /State/Components?nid={nid} NID NidOnly Parameter API response body
  - name: hsmAPIstateComponentsGETnidParamNidOnly - Retrieve a Component with a specific NID using GET and the nid query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?nid=9999999990&nidonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n0"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999990

  # GET /State/Components?nid_start={nid_start} NID_Start Parameter API response code
  # GET /State/Components?nid_start={nid_start} NID_Start Parameter API response body
  - name: hsmAPIstateComponentsGETnidStartParam - Retrieve Components with NIDs starting at a specific value using GET and the nid_start query parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?nid_start=9999999996"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                          - "x9999c7s9b9n7"
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                          - 9999999997
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components?nid_start={nid_start}&nid_end={nid_end} NID_Start NID_End Parameters API response code
  # GET /State/Components?nid_start={nid_start}&nid_end={nid_end} NID_Start NID_End Parameters API response body
  - name: hsmAPIstateComponentsGETnidStartNidEndParams - Retrieve Components with NIDs starting and ending at specific values using GET with the nid_start and nid_end query parameters.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?nid_start=9999999996&nid_end=9999999997"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999997
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components Many Parameters Existing Node API response code
  # GET /State/Components Many Parameters Existing Node API response body
  - name: hsmAPIstateComponentsGETManyParamsExistingNode - Retrieve Components with specific values of many query parameters using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?id=x9999c7s9b9n0&type=Node&state=Ready&flag=OK&enabled=true&softwarestatus=TestStatus0&role=Compute&subrole=Storage&nid=9999999990&nettype=Sling&arch=X86&class=Hill"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n0"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus0"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999990
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Hill"

  # POST /State/Components/Query Existing Component API response code
  # POST /State/Components/Query Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTexistingComponent - Query for existing Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n8"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/Query Type Node Existing Component API response code
  # POST /State/Components/Query Type Node Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTtypeNodeExistingComponent - Query for existing Node Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n8"],"Type":["Node"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/Query State Ready StateOnly Existing Component API response code
  # POST /State/Components/Query State Ready StateOnly Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTstateReadyStateOnlyExistingComponent - Query for existing Ready Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n1"],"State":["Ready"],"stateonly":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n1"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # POST /State/Components/Query Flag OK FlagOnly Existing Component API response code
  # POST /State/Components/Query Flag OK FlagOnly Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTflagOkFlagOnlyExistingComponent - Query for existing OK Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n7"],"Flag":["OK"],"flagonly":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # POST /State/Components/Query Enabled True Existing Component API response code
  # POST /State/Components/Query Enabled True Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTenabledTrueExistingComponent - Query for existing Enabled Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n6"],"Enabled":["true"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus6"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Ethernet"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/Query SoftwareStatus Existing Component API response code
  # POST /State/Components/Query SoftwareStatus Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTsoftwareStatusExistingComponent - Query for existing Components with a specific SoftwareStatus and ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n5"],"SoftwareStatus":["TestStatus5"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n5"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Off"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus5"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Application"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999995
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "OEM"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # POST /State/Components/Query Role Compute RoleOnly Existing Component API response code
  # POST /State/Components/Query Role Compute RoleOnly Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTroleComputeExistingComponent - Query for existing Compute Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n2"],"Role":["Compute"],"roleonly":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n2"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"

  # POST /State/Components/Query SubRole Master Existing Component API response code
  # POST /State/Components/Query SubRole Master Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTsubRoleMasterExistingComponent - Query for existing Master Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n8"],"SubRole":["Master"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/Query Arch X86 Existing Component API response code
  # POST /State/Components/Query Arch X86 Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTarchX86ExistingComponent - Query for existing X86 Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n7"],"Arch":["X86"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Empty"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus7"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Service"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Worker"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999997
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Infiniband"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/Query Class River Existing Component API response code
  # POST /State/Components/Query Class River Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTclassRiverExistingComponent - Query for existing River Components with a specific ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n6"],"Class":["River"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus6"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Ethernet"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/Query NID NidOnly Existing Component API response code
  # POST /State/Components/Query NID NidOnly Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTnidNidOnlyExistingComponent - Query for existing Components with a specific NID and ComponentID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n3"],"NID":["9999999993"],"nidonly":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999993

  # POST /State/Components/Query NID_Start Existing Component API response code
  # POST /State/Components/Query NID_Start Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTnidStartExistingComponent - Query for existing Components with specific ComponentIDs and NIDs starting at a specific value using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n8","x9999c7s9b9n7","x9999c7s9b9n6"],"nid_start":["9999999996"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                          - "x9999c7s9b9n7"
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                          - 9999999997
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # POST /State/Components/Query NID_Start NID_End Existing Component API response code
  # POST /State/Components/Query NID_Start NID_End Existing Component API response body
  - name: hsmAPIstateComponentsQueryPOSTnidStartNidEndExistingComponent - Query for existing Components with specific ComponentIDs as well as NIDs starting and ending at a specific value using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n8","x9999c7s9b9n7","x9999c7s9b9n6"],"nid_start":["9999999996"],"nid_end":["9999999997"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999997
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # POST /State/Components/Query Many Parameters Existing Node API response code
  # POST /State/Components/Query Many Parameters Existing Node API response body
  - name: hsmAPIstateComponentsQueryPOSTmanyParametersExistingComponent - Query for existing Components with specific ComponentIDs and many specific attributes using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b9n3"],"Type":["Node"],"State":["Standby"],"Flag":["Locked"],"Enabled":["false"],"SoftwareStatus":["TestStatus3"],"Role":["Management"],"SubRole":["Storage"],"Arch":["Other"],"Class":["Mountain"],"NID":["9999999993"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Standby"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Locked"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - false
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus3"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Management"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999993
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "Other"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # POST /State/Components/ByNID/Query Existing Component API response code
  # POST /State/Components/ByNID/Query Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTexistingComponent - Query for existing Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999998"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/ByNID/Query Type Node Existing Component API response code
  # POST /State/Components/ByNID/Query Type Node Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTtypeNodeExistingComponent - Query for existing Node Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999998"],"Type":["Node"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/ByNID/Query State Ready StateOnly Existing Component API response code
  # POST /State/Components/ByNID/Query State Ready StateOnly Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTstateReadyStateOnlyExistingComponent - Query for existing Ready Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999991"],"State":["Ready"],"stateonly":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n1"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # POST /State/Components/ByNID/Query Flag OK FlagOnly Existing Component API response code
  # POST /State/Components/ByNID/Query Flag OK FlagOnly Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTflagOkFlagOnlyExistingComponent - Query for existing OK Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999997"],"Flag":["OK"],"flagonly":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # POST /State/Components/ByNID/Query Enabled True Existing Component API response code
  # POST /State/Components/ByNID/Query Enabled True Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTenabledTrueExistingComponent - Query for existing Enabled Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999996"],"Enabled":["true"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus6"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Ethernet"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/ByNID/Query SoftwareStatus Existing Component API response code
  # POST /State/Components/ByNID/Query SoftwareStatus Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTsoftwareStatusExistingComponent - Query for existing Components with specific NID ranges and SoftwareStatus using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999995"],"SoftwareStatus":["TestStatus5"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n5"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Off"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus5"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Application"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999995
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "OEM"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # POST /State/Components/ByNID/Query Role Compute RoleOnly Existing Component API response code
  # POST /State/Components/ByNID/Query Role Compute RoleOnly Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTroleComputeExistingComponent - Query for existing Compute Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999995"],"Role":["Compute"],"roleonly":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n2"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"

  # POST /State/Components/ByNID/Query SubRole Master Existing Component API response code
  # POST /State/Components/ByNID/Query SubRole Master Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTsubRoleMasterExistingComponent - Query for existing Master Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999998"],"SubRole":["Master"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/ByNID/Query Arch X86 Existing Component API response code
  # POST /State/Components/ByNID/Query Arch X86 Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTarchX86ExistingComponent - Query for existing X86 Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999997"],"Arch":["X86"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Empty"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus7"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Service"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Worker"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999997
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Infiniband"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/ByNID/Query Class River Existing Component API response code
  # POST /State/Components/ByNID/Query Class River Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTclassRiverExistingComponent - Query for existing River Components with specific NID ranges using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999996"],"Class":["River"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus6"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Ethernet"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # POST /State/Components/ByNID/Query NID NidOnly Existing Component API response code
  # POST /State/Components/ByNID/Query NID NidOnly Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTnidNidOnlyExistingComponent - Query for existing Components with specific NID ranges and NID using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999993"],"NID":["9999999993"],"nidonly":true}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999993

  # POST /State/Components/ByNID/Query NID_Start Existing Component API response code
  # POST /State/Components/ByNID/Query NID_Start Existing Component API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTnidStartExistingComponent - Query for existing Components with specific NID ranges and NID start value using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999996-9999999998"],"nid_start":["9999999996"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                          - "x9999c7s9b9n7"
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                          - 9999999997
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # POST /State/Components/ByNID/Query Many Parameters Existing Node API response code
  # POST /State/Components/ByNID/Query Many Parameters Existing Node API response body
  - name: hsmAPIstateComponentsByNIDqueryPOSTmanyParametersExistingComponent - Query for existing Components with specific NID ranges and many additional attributes using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/Query"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NIDRanges":["9999999993"],"Type":["Node"],"State":["Standby"],"Flag":["Locked"],"Enabled":["false"],"SoftwareStatus":["TestStatus3"],"Role":["Management"],"SubRole":["Storage"],"Arch":["Other"],"Class":["Mountain"]}
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Standby"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Locked"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - false
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus3"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Management"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999993
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "Other"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components/Query/{xname} Existing Component API response code
  # GET /State/Components/Query/{xname} Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETexistingComponent - Query for existing Components by ID using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components/Query/{xname} Type Node Existing Component API response code
  # GET /State/Components/Query/{xname} Type Node Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETtypeNodeExistingComponent - Query for existing Node Components by ID using GET with type parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n8?type=Node"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components/Query/{xname} State Ready StateOnly Existing Component API response code
  # GET /State/Components/Query/{xname} State Ready StateOnly Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETstateReadyStateOnlyExistingComponent - Query for existing Ready Components by ID using GET with state parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n1?state=Ready&stateonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n1"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # GET /State/Components/Query/{xname} Flag OK FlagOnly Existing Component API response code
  # GET /State/Components/Query/{xname} Flag OK FlagOnly Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETflagOkFlagOnlyExistingComponent - Query for existing OK Components by ID using GET with flag parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n7?flag=OK&flagonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # GET /State/Components/Query/{xname} Enabled True Existing Component API response code
  # GET /State/Components/Query/{xname} Enabled True Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETenabledTrueExistingComponent - Query for existing Enabled Components by ID using GET with enabled parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n6?enabled=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus6"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Ethernet"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components/Query/{xname} SoftwareStatus Existing Component API response code
  # GET /State/Components/Query/{xname} SoftwareStatus Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETsoftwareStatusExistingComponent - Query for existing Components with specific SoftwareStatus by ID using GET with softwarestatus parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n5?softwarestatus=TestStatus5"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n5"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Off"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus5"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Application"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999995
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "OEM"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components/Query/{xname} Role Compute RoleOnly Existing Component API response code
  # GET /State/Components/Query/{xname} Role Compute RoleOnly Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETroleComputeExistingComponent - Query for existing Compute Components by ID using GET with role parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n2?role=Compute&roleonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n2"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"

  # GET /State/Components/Query/{xname} SubRole Master Existing Component API response code
  # GET /State/Components/Query/{xname} SubRole Master Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETsubRoleMasterExistingComponent - Query for existing Master Components by ID using GET with subrole parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n8?subrole=Master"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Unknown"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus8"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Compute"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Master"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components/Query/{xname} Arch X86 Existing Component API response code
  # GET /State/Components/Query/{xname} Arch X86 Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETarchX86ExistingComponent - Query for existing X86 Components by ID using GET with arch parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n7?arch=X86"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Empty"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus7"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Service"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Worker"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999997
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Infiniband"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "X86"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components/Query/{xname} Class River Existing Component API response code
  # GET /State/Components/Query/{xname} Class River Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETclassRiverExistingComponent - Query for existing River Components by ID using GET with class parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n6?class=River"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Populated"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Warning"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - true
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus6"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Ethernet"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "ARM"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "River"

  # GET /State/Components/Query/{xname} NID NidOnly Existing Component API response code
  # GET /State/Components/Query/{xname} NID NidOnly Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETnidNidOnlyExistingComponent - Query for existing Components with specific NID by ID using GET with nid parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n3?nid=9999999993&nidonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999993

  # GET /State/Components/Query/{xname} NID_Start Existing Component API response code
  # GET /State/Components/Query/{xname} NID_Start Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETnidStartExistingComponent - Query for existing Components with specific NID start values by ID using GET with nid_start parameter.
    request:
      #TODO: This API tries to support nid_start and nid_end parameters that don't make sense, the xname is actually ignored CASMHMS-5836
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n6?nid_start=9999999996"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n8"
                          - "x9999c7s9b9n7"
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999998
                          - 9999999997
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components/Query/{xname} NID_Start NID_End Existing Component API response code
  # GET /State/Components/Query/{xname} NID_Start NID_End Existing Component API response body
  - name: hsmAPIstateComponentsQueryXnameGETnidStartNidEndExistingComponent - Query for existing Components with specific NID start and NID end values by ID using GET with nid_start and nid_end parameters.
    request:
      #TODO: This API tries to support nid_start and nid_end parameters that don't make sense, the xname is actually ignored CASMHMS-5836
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n6?nid_start=9999999996&nid_end=9999999997"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n7"
                          - "x9999c7s9b9n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                      Flag:
                        type: str
                        required: True
                      Enabled:
                        type: bool
                        required: True
                      SoftwareStatus:
                        type: str
                        required: True
                      Role:
                        type: str
                        required: True
                      SubRole:
                        type: str
                        required: True
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999997
                          - 9999999996
                      NetType:
                        type: str
                        required: True
                      Arch:
                        type: str
                        required: True
                      Class:
                        type: str
                        required: True

  # GET /State/Components/Query/{xname} Many Parameters Existing Node API response code
  # GET /State/Components/Query/{xname} Many Parameters Existing Node API response body
  - name: hsmAPIstateComponentsQueryXnameGETmanyParametersExistingComponent - Query for existing Components with multiple specific attributes by ID using GET with many parameters.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/Query/x9999c7s9b9n3?type=Node&state=Standby&flag=Locked&enabled=False&SoftwareStatus=TestStatus3&role=Management&subrole=Storage&arch=Other&class=Mountain&NID=9999999993"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b9n3"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Standby"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "Locked"
                      Enabled:
                        type: bool
                        required: True
                        enum:
                          - false
                      SoftwareStatus:
                        type: str
                        required: True
                        enum:
                          - "TestStatus3"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "Management"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999993
                      NetType:
                        type: str
                        required: True
                        enum:
                          - "Sling"
                      Arch:
                        type: str
                        required: True
                        enum:
                          - "Other"
                      Class:
                        type: str
                        required: True
                        enum:
                          - "Mountain"

  # GET /State/Components/ByNID/{nid} NodeA API response code
  # GET /State/Components/ByNID/{nid} NodeA API response body
  - name: hsmAPIstateComponentsByNidGETnidNodeA - Retrieve an existing Component by NID using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/9999999990"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b9n0"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Ready"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus0"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Storage"
              NID:
                type: int
                required: True
                enum:
                  - 9999999990
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "Hill"

  # GET /State/Components/ByNID/{nid} NodeB API response code
  # GET /State/Components/ByNID/{nid} NodeB API response body
  - name: hsmAPIstateComponentsByNidGETnidNodeB - Retrieve a different existing Component by NID using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/ByNID/9999999998"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b9n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Unknown"
              Flag:
                type: str
                required: True
                enum:
                  - "Unknown"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus8"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Master"
              NID:
                type: int
                required: True
                enum:
                  - 9999999998
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # POST /State/Components Nodes For Bulk Updates API response code
  # POST /State/Components Nodes For Bulk Updates API response body
  - name: hsmAPIstateComponentsPOSTnodesForBulkUpdates - Create multiple Node Components for bulk update tests using POST.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b8n8","Type":"Node","State":"Ready","Flag":"OK","Enabled":true,"SoftwareStatus":"TestStatus8","Role":"Compute","SubRole":"Master","NID":9999999988,"NetType":"Sling","Arch":"X86","Class":"River"},{"ID":"x9999c7s9b8n7","Type":"Node","State":"On","Flag":"Alert","Enabled":true,"SoftwareStatus":"TestStatus7","Role":"Service","SubRole":"Worker","NID":9999999987,"NetType":"Infiniband","Arch":"Other","Class":"Mountain"},{"ID":"x9999c7s9b8n6","Type":"Node","State":"Off","Flag":"Warning","Enabled":true,"SoftwareStatus":"TestStatus6","Role":"System","SubRole":"Storage","NID":9999999986,"NetType":"Ethernet","Arch":"ARM","Class":"Hill"}],"Force":false}
    response:
      status_code: 204

  # PATCH /State/Components/BulkStateData Nodes State Flag API response code
  # PATCH /State/Components/BulkStateData Nodes State Flag API response body
  - name: hsmAPIstateComponentsBulkStateDataPATCHnodesStateFlag - Bulk update Node Component state and flag values using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkStateData"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      #TODO: Example payload shows force option but Swagger doesn't explain what it does, Force=false seemed to only update the first node x9999c7s9b8n8 CASMHMS-5837
      #json: {"ComponentIDs":["x9999c7s9b8n8","x9999c7s9b8n7"],"State":"Standby","Flag":"Alert","Force":false}
      json: {"ComponentIDs":["x9999c7s9b8n8","x9999c7s9b8n7"],"State":"Standby","Flag":"Alert","Force":true}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated BulkStateData NodeA API response code
  # GET /State/Components/{xname} Updated BulkStateData NodeA API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkStateDataNodeA - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Alert"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus8"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Master"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # GET /State/Components/{xname} Updated BulkStateData NodeB API response code
  # GET /State/Components/{xname} Updated BulkStateData NodeB API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkStateDataNodeB - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n7"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n7"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Alert"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus7"
              Role:
                type: str
                required: True
                enum:
                  - "Service"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999987
              NetType:
                type: str
                required: True
                enum:
                  - "Infiniband"
              Arch:
                type: str
                required: True
                enum:
                  - "Other"
              Class:
                type: str
                required: True
                enum:
                  - "Mountain"

  # GET /State/Components/{xname} Non-Updated BulkStateData Node API response code
  # GET /State/Components/{xname} Non-Updated BulkStateData Node API response body
  - name: hsmAPIstateComponentsGETxnameNonUpdatedBulkStateDataNode - Retrieve Node Component using GET that was not bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n6"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n6"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Off"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus6"
              Role:
                type: str
                required: True
                enum:
                  - "System"
              SubRole:
                type: str
                required: True
                enum:
                  - "Storage"
              NID:
                type: int
                required: True
                enum:
                  - 9999999986
              NetType:
                type: str
                required: True
                enum:
                  - "Ethernet"
              Arch:
                type: str
                required: True
                enum:
                  - "ARM"
              Class:
                type: str
                required: True
                enum:
                  - "Hill"

  # PATCH /State/Components/{xname}/StateData Node State No Flag API response code
  # PATCH /State/Components/{xname}/StateData Node State No Flag API response body
  - name: hsmAPIstateComponentsXnameStateDataPATCHnodeStateNoFlag - Update state data for specific Node Component using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n6/StateData"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      #TODO: Example payload shows force option but Swagger doesn't explain what it does, Force=false and Force=true seem to do the same thing here CASMHMS-5837
      #json: {"State":"Ready","Flag":"OK","Force":false}
      json: {"State":"Ready","Force":true}
    response:
      status_code: 204

  # GET /State/Components?stateonly=True Updated Node API response code
  # GET /State/Components?stateonly=True Updated Node API response body
  - name: hsmAPIstateComponentsGETstateonlyParamUpdatedNodeStateData - Retrieve updated Node Component using GET and stateonly parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?id=x9999c7s9b8n6&stateonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b8n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      State:
                        type: str
                        required: True
                        enum:
                          - "Ready"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # GET /State/Components?flagonly=True Updated Node API response code
  # GET /State/Components?flagonly=True Updated Node API response body
  - name: hsmAPIstateComponentsGETflagonlyParamUpdatedNodeStateData - Retrieve updated Node Component using GET and flagonly parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?id=x9999c7s9b8n6&flagonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b8n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # GET /State/Components?roleonly=True Updated Node API response code
  # GET /State/Components?roleonly=True Updated Node API response body
  - name: hsmAPIstateComponentsGETroleonlyParamUpdatedNode - Retrieve updated Node Component using GET and roleonly parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?id=x9999c7s9b8n6&roleonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b8n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Role:
                        type: str
                        required: True
                        enum:
                          - "System"
                      SubRole:
                        type: str
                        required: True
                        enum:
                          - "Storage"

  # GET /State/Components?nidonly=True Updated Node API response code
  # GET /State/Components?nidonly=True Updated Node API response body
  - name: hsmAPIstateComponentsGETnidonlyParamUpdatedNode - Retrieve the Component data for the updated Node using GET with the nidonly parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?id=x9999c7s9b8n6&nidonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b8n6"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      NID:
                        type: int
                        required: True
                        enum:
                          - 9999999986

  # PATCH /State/Components/BulkFlagOnly Nodes API response code
  # PATCH /State/Components/BulkFlagOnly Nodes API response body
  - name: hsmAPIstateComponentsBulkFlagOnlyPATCHnodes - Bulk update Node Component flag values using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkFlagOnly"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n7","x9999c7s9b8n6"],"Flag":"Warning"}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated BulkFlagOnly NodeA API response code
  # GET /State/Components/{xname} Updated BulkFlagOnly NodeA API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkFlagOnlyNodeA - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n7"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n7"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus7"
              Role:
                type: str
                required: True
                enum:
                  - "Service"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999987
              NetType:
                type: str
                required: True
                enum:
                  - "Infiniband"
              Arch:
                type: str
                required: True
                enum:
                  - "Other"
              Class:
                type: str
                required: True
                enum:
                  - "Mountain"

  # GET /State/Components/{xname} Updated BulkFlagOnly NodeB API response code
  # GET /State/Components/{xname} Updated BulkFlagOnly NodeB API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkFlagOnlyNodeB - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n6"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n6"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Ready"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus6"
              Role:
                type: str
                required: True
                enum:
                  - "System"
              SubRole:
                type: str
                required: True
                enum:
                  - "Storage"
              NID:
                type: int
                required: True
                enum:
                  - 9999999986
              NetType:
                type: str
                required: True
                enum:
                  - "Ethernet"
              Arch:
                type: str
                required: True
                enum:
                  - "ARM"
              Class:
                type: str
                required: True
                enum:
                  - "Hill"

  # GET /State/Components/{xname} Non-Updated BulkFlagOnly Node API response code
  # GET /State/Components/{xname} Non-Updated BulkFlagOnly Node API response body
  - name: hsmAPIstateComponentsGETxnameNonUpdatedBulkFlagOnlyNode - Retrieve Node Component using GET that was not bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Alert"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus8"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Master"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # PATCH /State/Components/{xname}/FlagOnly Node API response code
  # PATCH /State/Components/{xname}/FlagOnly Node API response body
  - name: hsmAPIstateComponentsXnameFlagOnlyPATCHnode - Update flag data for specific Node Component using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8/FlagOnly"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Flag":"OK"}
    response:
      status_code: 204

  # GET /State/Components?flagonly=True Updated Node API response code
  # GET /State/Components?flagonly=True Updated Node API response body
  - name: hsmAPIstateComponentsGETflagonlyParamUpdatedNodeFlagOnly - Retrieve updated Node Component using GET and flagonly parameter.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components?id=x9999c7s9b8n8&flagonly=True"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              Components:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        enum:
                          - "x9999c7s9b8n8"
                      Type:
                        type: str
                        required: True
                        enum:
                          - "Node"
                      Flag:
                        type: str
                        required: True
                        enum:
                          - "OK"

  # PATCH /State/Components/BulkEnabled Nodes API response code
  # PATCH /State/Components/BulkEnabled Nodes API response body
  - name: hsmAPIstateComponentsBulkEnabledPATCHnodes - Bulk update Node Component enabled values using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkEnabled"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n7","x9999c7s9b8n6"],"Enabled":false}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated BulkEnabled NodeA API response code
  # GET /State/Components/{xname} Updated BulkEnabled NodeA API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkEnabledNodeA - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n7"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n7"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus7"
              Role:
                type: str
                required: True
                enum:
                  - "Service"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999987
              NetType:
                type: str
                required: True
                enum:
                  - "Infiniband"
              Arch:
                type: str
                required: True
                enum:
                  - "Other"
              Class:
                type: str
                required: True
                enum:
                  - "Mountain"

  # GET /State/Components/{xname} Updated BulkEnabled NodeB API response code
  # GET /State/Components/{xname} Updated BulkEnabled NodeB API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkEnabledNodeB - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n6"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n6"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Ready"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus6"
              Role:
                type: str
                required: True
                enum:
                  - "System"
              SubRole:
                type: str
                required: True
                enum:
                  - "Storage"
              NID:
                type: int
                required: True
                enum:
                  - 9999999986
              NetType:
                type: str
                required: True
                enum:
                  - "Ethernet"
              Arch:
                type: str
                required: True
                enum:
                  - "ARM"
              Class:
                type: str
                required: True
                enum:
                  - "Hill"

  # GET /State/Components/{xname} Non-Updated BulkEnabled Node API response code
  # GET /State/Components/{xname} Non-Updated BulkEnabled Node API response body
  - name: hsmAPIstateComponentsGETxnameNonUpdatedBulkEnabledNode - Retrieve Node Component using GET that was not bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - true
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus8"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Master"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # PATCH /State/Components/{xname}/Enabled Node API response code
  # PATCH /State/Components/{xname}/Enabled Node API response body
  - name: hsmAPIstateComponentsXnameEnabledPATCHnode - Update enabled data for specific Node Component using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8/Enabled"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Enabled":false}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated Enabled Node API response code
  # GET /State/Components/{xname} Updated Enabled Node API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedEnabledNode - Retrieve updated Node Component using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus8"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Master"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # PATCH /State/Components/BulkSoftwareStatus Nodes API response code
  # PATCH /State/Components/BulkSoftwareStatus Nodes API response body
  - name: hsmAPIstateComponentsBulkSoftwareStatusPATCHnodes - Bulk update Node Component softwarestatus values using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkSoftwareStatus"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n7","x9999c7s9b8n6"],"SoftwareStatus":"UpdatedBulkSoftwareStatus"}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated BulkSoftwareStatus NodeA API response code
  # GET /State/Components/{xname} Updated BulkSoftwareStatus NodeA API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkSoftwareStatusNodeA - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n7"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n7"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedBulkSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Service"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999987
              NetType:
                type: str
                required: True
                enum:
                  - "Infiniband"
              Arch:
                type: str
                required: True
                enum:
                  - "Other"
              Class:
                type: str
                required: True
                enum:
                  - "Mountain"

  # GET /State/Components/{xname} Updated BulkSoftwareStatus NodeB API response code
  # GET /State/Components/{xname} Updated BulkSoftwareStatus NodeB API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkSoftwareStatusNodeB - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n6"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n6"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Ready"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedBulkSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "System"
              SubRole:
                type: str
                required: True
                enum:
                  - "Storage"
              NID:
                type: int
                required: True
                enum:
                  - 9999999986
              NetType:
                type: str
                required: True
                enum:
                  - "Ethernet"
              Arch:
                type: str
                required: True
                enum:
                  - "ARM"
              Class:
                type: str
                required: True
                enum:
                  - "Hill"

  # GET /State/Components/{xname} Non-Updated BulkSoftwareStatus Node API response code
  # GET /State/Components/{xname} Non-Updated BulkSoftwareStatus Node API response body
  - name: hsmAPIstateComponentsGETxnameNonUpdatedBulkSoftwareStatusNode - Retrieve Node Component using GET that was not bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "TestStatus8"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Master"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # PATCH /State/Components/{xname}/SoftwareStatus Node API response code
  # PATCH /State/Components/{xname}/SoftwareStatus Node API response body
  - name: hsmAPIstateComponentsXnameSoftwareStatusPATCHnode - Update softwarestatus data for specific Node Component using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8/SoftwareStatus"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"SoftwareStatus":"UpdatedXnameSoftwareStatus"}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated SoftwareStatus Node API response code
  # GET /State/Components/{xname} Updated SoftwareStatus Node API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedSoftwareStatusNode - Retrieve updated Node Component using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedXnameSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Master"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  #PATCH /State/Components/BulkRole Nodes API response code
  #PATCH /State/Components/BulkRole Nodes API response body
  - name: hsmAPIstateComponentsBulkRolePATCHnodes - Bulk update Node Component role values using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkRole"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"ComponentIDs":["x9999c7s9b8n7","x9999c7s9b8n6"],"Role":"Compute","SubRole":"Worker"}
    response:
      status_code: 204
 
  #GET /State/Components/{xname} Updated BulkRole NodeA API response code
  #GET /State/Components/{xname} Updated BulkRole NodeA API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkRoleNodeA - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n7"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n7"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedBulkSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999987
              NetType:
                type: str
                required: True
                enum:
                  - "Infiniband"
              Arch:
                type: str
                required: True
                enum:
                  - "Other"
              Class:
                type: str
                required: True
                enum:
                  - "Mountain"
 
  #GET /State/Components/{xname} Updated BulkRole NodeB API response code
  #GET /State/Components/{xname} Updated BulkRole NodeB API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkRoleNodeB - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n6"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n6"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Ready"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedBulkSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999986
              NetType:
                type: str
                required: True
                enum:
                  - "Ethernet"
              Arch:
                type: str
                required: True
                enum:
                  - "ARM"
              Class:
                type: str
                required: True
                enum:
                  - "Hill"
 
  #GET /State/Components/{xname} Non-Updated BulkRole Node API response code
  #GET /State/Components/{xname} Non-Updated BulkRole Node API response body
  - name: hsmAPIstateComponentsGETxnameNonUpdatedBulkRoleNode - Retrieve Node Component using GET that was not bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedXnameSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Master"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"
 
  # PATCH /State/Components/{xname}/Role Node API response code
  # PATCH /State/Components/{xname}/Role Node API response body
  - name: hsmAPIstateComponentsXnameRolePATCHnode - Update role data for specific Node Component using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8/Role"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Role":"Service","SubRole":"Worker"}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated Role Node API response code
  # GET /State/Components/{xname} Updated Role Node API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedSoftwareStatusNode - Retrieve updated Node Component using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedXnameSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Service"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # PATCH /State/Components/BulkNID Nodes API response code
  # PATCH /State/Components/BulkNID Nodes API response body
  - name: hsmAPIstateComponentsBulkNidPATCHnodes - Bulk update Node Component NID values using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/BulkNID"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"Components":[{"ID":"x9999c7s9b8n7","NID":9999999977},{"ID":"x9999c7s9b8n6","NID":9999999976}]}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated BulkNID NodeA API response code
  # GET /State/Components/{xname} Updated BulkNID NodeA API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkNIDNodeA - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n7"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n7"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedBulkSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999977
              NetType:
                type: str
                required: True
                enum:
                  - "Infiniband"
              Arch:
                type: str
                required: True
                enum:
                  - "Other"
              Class:
                type: str
                required: True
                enum:
                  - "Mountain"

  # GET /State/Components/{xname} Updated BulkNID NodeB API response code
  # GET /State/Components/{xname} Updated BulkNID NodeB API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedBulkNIDNodeB - Retrieve Node Component using GET that was bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n6"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n6"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Ready"
              Flag:
                type: str
                required: True
                enum:
                  - "Warning"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedBulkSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Compute"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999976
              NetType:
                type: str
                required: True
                enum:
                  - "Ethernet"
              Arch:
                type: str
                required: True
                enum:
                  - "ARM"
              Class:
                type: str
                required: True
                enum:
                  - "Hill"

  # GET /State/Components/{xname} Non-Updated BulkNID Node API response code
  # GET /State/Components/{xname} Non-Updated BulkNID Node API response body
  - name: hsmAPIstateComponentsGETxnameNonUpdatedBulkNIDNode - Retrieve Node Component using GET that was not bulk updated.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedXnameSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Service"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999988
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # PATCH /State/Components/{xname}/NID Node API response code
  # PATCH /State/Components/{xname}/NID Node API response body
  - name: hsmAPIstateComponentsXnameNidPATCHnode - Update NID data for specific Node Component using PATCH.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8/NID"
      method: PATCH
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
      json: {"NID":9999999978}
    response:
      status_code: 204

  # GET /State/Components/{xname} Updated NID Node API response code
  # GET /State/Components/{xname} Updated NID Node API response body
  - name: hsmAPIstateComponentsGETxnameUpdatedNIDNode - Retrieve updated Node Component using GET.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/x9999c7s9b8n8"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "x9999c7s9b8n8"
              Type:
                type: str
                required: True
                enum:
                  - "Node"
              State:
                type: str
                required: True
                enum:
                  - "Standby"
              Flag:
                type: str
                required: True
                enum:
                  - "OK"
              Enabled:
                type: bool
                required: True
                enum:
                  - false
              SoftwareStatus:
                type: str
                required: True
                enum:
                  - "UpdatedXnameSoftwareStatus"
              Role:
                type: str
                required: True
                enum:
                  - "Service"
              SubRole:
                type: str
                required: True
                enum:
                  - "Worker"
              NID:
                type: int
                required: True
                enum:
                  - 9999999978
              NetType:
                type: str
                required: True
                enum:
                  - "Sling"
              Arch:
                type: str
                required: True
                enum:
                  - "X86"
              Class:
                type: str
                required: True
                enum:
                  - "River"

  # DELETE /State/Components API response code
  # DELETE /State/Components API response body
  - name: hsmAPIstateComponentsDELETE - Remove all Components using DELETE.
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: DELETE
      verify: !bool "{verify}"

---
test_name: Verify Component operations on (Virtual)Nodes with no system role information in SLS or NodeMaps

marks:
  - parametrize:
      key:
      - type
      - xname
      - bogus_nid
      vals:
      - [Node, x9999c5s17b0n0, 163850784]
      - [Node, x9999c5s17b0n1, 163850785]
      - [VirtualNode, x9999c5s17b0n0v0, 163850784]
      - [VirtualNode, x9999c5s17b0n0v1, 163850785]

stages:
  # Remove test node from SLS
  - name: Remove any test {type} from SLS
    request:
      url: "{sls_base_url}/v1/hardware/{xname}"
      method: DELETE
      verify: !bool "{verify}"

  # Remove any node maps from HSM for the node
  - name: Remove any test {type} from NodeMaps
    request:
      url: "{hsm_base_url}/hsm/v2/Defaults/NodeMaps/{xname}"
      method: DELETE
      verify: !bool "{verify}"

  # Remove any test Node from State Components
  - name: Remove any test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"

  # POST Create Node with no system role information
  - name: Create {type} component using POST with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      json:
        Components:
        - ID: "{xname}"
          State: Populated
    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using POST with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Compute" # This is the role that nodes get by default
              NID:
                type: int
                enum:
                - !int "{bogus_nid}" # Bogus NID computed from xname

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  # POST Create node with System role information
  - name: Create {type} component using POST with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      json:
        Components:
        - ID: "{xname}"
          State: Populated
          Role: Management
          SubRole: Worker
          NID: 9999999977
          Class: River
          Arch: X86
          NetType: "Sling"

    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using POST with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Management"
              SubRole:
                type: str
                enum:
                - "Worker"
              NID:
                type: int
                enum:
                - 9999999977
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  # PUT Node with no system role information
  - name: Create Node component using PUT with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: PUT
      verify: !bool "{verify}"
      json:
        Component:
          ID: "{xname}"
          State: Populated
    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using PUT with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Compute" # This is the role that nodes get by default
              NID:
                type: int
                enum:
                - !int "{bogus_nid}" # Bogus NID computed from xname

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  # PUT Node with system role information
  - name: Create {type} component using PUT with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: PUT
      verify: !bool "{verify}"
      json:
        Component:
          ID: "{xname}"
          State: Populated
          Role: Management
          SubRole: Worker
          NID: 9999999977
          Class: River
          Arch: X86
          NetType: "Sling"

    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using PUT with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Management"
              SubRole:
                type: str
                enum:
                - "Worker"
              NID:
                type: int
                enum:
                - 9999999977
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"
  # DELETE Node
  - name: Remove test Node from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

---
test_name: Verify Component operations on (Virtual)Nodes with system role information in SLS

marks:
  - parametrize:
      key:
      - type
      - xname
      vals:
      - [Node, x9999c5s17b0n0]
      - [Node, x9999c5s17b0n1]
      - [VirtualNode, x9999c5s17b0n0v0]
      - [VirtualNode, x9999c5s17b0n0v1]

stages:
  # PUT test virtual node from SLS
  - name: Create using PUT the test {type} into SLS
    request:
      url: "{sls_base_url}/v1/hardware/{xname}"
      method: PUT
      verify: !bool "{verify}"
      json:
        ID: "{xname}"
        Class: River
        ExtraProperties:
          Role: Application
          SubRole: Storage
          NID: 9999999967
          Aliases: 
          - uan999
    response:
      status_code:
      - 201


  # Remove any node maps from HSM for the node
  - name: Remove any test {type} from NodeMaps
    request:
      url: "{hsm_base_url}/hsm/v2/Defaults/NodeMaps/{xname}"
      method: DELETE
      verify: !bool "{verify}"

  # Remove any test Node from State Components
  - name: Remove any test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"

  # POST Create Node with no system role information
  - name: Create {type} component using POST with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      json:
        Components:
        - ID: "{xname}"
          State: Populated
    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using POST with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Application"
              SubRole:
                type: str
                enum:
                - "Storage"
              NID:
                type: int
                enum:
                - 9999999967
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  # POST Create node with System role information
  - name: Create {type} component using POST with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      json:
        Components:
        - ID: "{xname}"
          State: Populated
          Role: Management # This ROle is different than SLS
          SubRole: Worker # This SubRole is different than SLS 
          NID: 9999999977 # This NID is different than SLS
          Class: River
          Arch: X86
          NetType: "Sling"

    response:
      status_code: 204
 
  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using POST with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Management"
              SubRole:
                type: str
                enum:
                - "Worker"
              NID:
                type: int
                enum:
                - 9999999977
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  # PUT Node with no system role information
  - name: Create Node component using PUT with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: PUT
      verify: !bool "{verify}"
      json:
        Component:
          ID: "{xname}"
          State: Populated
    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using PUT with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Application"
              SubRole:
                type: str
                enum:
                - "Storage"
              NID:
                type: int
                enum:
                - 9999999967
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  # PUT Node with system role information
  - name: Create {type} component using PUT with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: PUT
      verify: !bool "{verify}"
      json:
        Component:
          ID: "{xname}"
          State: Populated
          Role: Management
          SubRole: Worker
          NID: 9999999977
          Class: River
          Arch: X86
          NetType: "Sling"

    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using PUT with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Management"
              SubRole:
                type: str
                enum:
                - "Worker"
              NID:
                type: int
                enum:
                - 9999999977
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"
  # DELETE Node
  - name: Remove test Node from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200


  # Remove test node from SLS
  - name: Remove the test {type} from SLS
    request:
      url: "{sls_base_url}/v1/hardware/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

---
test_name: Verify Component operations on (Virtual)Nodes with system role information in NodeMaps

marks:
  - parametrize:
      key:
      - type
      - xname
      vals:
      - [Node, x9999c5s17b0n0]
      - [Node, x9999c5s17b0n1]
      - [VirtualNode, x9999c5s17b0n0v0]
      - [VirtualNode, x9999c5s17b0n0v1]

stages:
  # Delete test virtual node from SLS
  - name: Remove any test {type} from SLS
    request:
      url: "{sls_base_url}/v1/hardware/{xname}"
      method: DELETE
      verify: !bool "{verify}"

  # PUT test virtual node into HSM NodeMaps
  - name: Create test {type} in NodeMaps
    request:
      url: "{hsm_base_url}/hsm/v2/Defaults/NodeMaps/{xname}"
      method: PUT
      verify: !bool "{verify}"
      json:
        Role: Application
        SubRole: Storage
        NID: 9999999967
    response:
      status_code: 200

  # Remove any test Node from State Components
  - name: Remove any test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"

  # POST Create Node with no system role information
  - name: Create {type} component using POST with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      json:
        Components:
        - ID: "{xname}"
          State: Populated
    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using POST with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Application"
              SubRole:
                type: str
                enum:
                - "Storage"
              NID:
                type: int
                enum:
                - 9999999967
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  # POST Create node with System role information
  - name: Create {type} component using POST with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components"
      method: POST
      verify: !bool "{verify}"
      json:
        Components:
        - ID: "{xname}"
          State: Populated
          Role: Management # This ROle is different than NodeMaps
          SubRole: Worker # This SubRole is different than NodeMaps
          NID: 9999999977 # This NID is different than NodeMaps
          Class: River
          Arch: X86
          NetType: "Sling"

    response:
      status_code: 204
 
  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using POST with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Management"
              SubRole:
                type: str
                enum:
                - "Worker"
              NID:
                type: int
                enum:
                - 9999999977
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200

  # PUT Node with no system role information
  - name: Create Node component using PUT with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: PUT
      verify: !bool "{verify}"
      json:
        Component:
          ID: "{xname}"
          State: Populated
    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using PUT with no system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Application"
              SubRole:
                type: str
                enum:
                - "Storage"
              NID:
                type: int
                enum:
                - 9999999967
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"

  # DELETE Node
  - name: Remove test {type} from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200 

  # PUT Node with system role information
  - name: Create {type} component using PUT with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: PUT
      verify: !bool "{verify}"
      json:
        Component:
          ID: "{xname}"
          State: Populated
          Role: Management
          SubRole: Worker
          NID: 9999999977
          Class: River
          Arch: X86
          NetType: "Sling"

    response:
      status_code: 204

  # GET Verify Node was created successfully
  - name: Verify {type} component was successfully created using PUT with system role information
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            mapping:
              ID:
                type: str
                enum:
                - "{xname}"
              Type:
                type: str
                enum:
                - "{type}"
              State:
                type: str
                enum:
                - Populated
              Flag:
                type: str
                enum:
                - OK
              Enabled:
                type: bool
                enum:
                - True
              Role:
                type: str
                enum:
                - "Management"
              SubRole:
                type: str
                enum:
                - "Worker"
              NID:
                type: int
                enum:
                - 9999999977
              Class:
                type: str
                enum:
                - "River"
              Arch:
                type: str
                enum:
                - "X86"
              NetType:
                type: str
                enum:
                - "Sling"
  # DELETE Node
  - name: Remove test Node from State Components
    request:
      url: "{hsm_base_url}/hsm/v2/State/Components/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200


  # Remove test node from NodeMaps
  - name: Remove the test {type} from NodeMaps
    request:
      url: "{hsm_base_url}/hsm/v2/Defaults/NodeMaps/{xname}"
      method: DELETE
      verify: !bool "{verify}"
    response:
      status_code: 200
      headers:
        Authorization: "Bearer {access_token}"

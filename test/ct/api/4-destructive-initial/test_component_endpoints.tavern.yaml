# MIT License
#
# (C) Copyright [2022-2023] Hewlett Packard Enterprise Development LP
#
# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included
# in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR
# OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
# OTHER DEALINGS IN THE SOFTWARE.

# Tavern test cases for the Hardware State Manager (HSM) ComponentEndpoints API.
# Author: Mike Buchmann, Mitch Schooler
# Service: Hardware State Manager

# HMS test metrics test cases: 7
# GET /Inventory/ComponentEndpoints retrieve ID
# GET /Inventory/ComponentEndpoints/{id} existent ID
# DELETE /Inventory/ComponentEndpoints/{id} existent ID
# DELETE /Inventory/ComponentEndpoints/{id} non-existent ID
# DELETE /Inventory/ComponentEndpoints all endpoints
# DELETE /Inventory/ComponentEndpoints all endpoints deleted
# DELETE /Inventory/ComponentEndpoints/{id} invalid ID
---
# THESE ARE DESTRUCTIVE TESTS - THEY WILL REMOVE ALL COMPONENT ENDPOINTS
test_name: Verify destructive ComponentEndpoint operations

stages:
  - name: Get access token
    request:
      url: "{opaal_base_url}/token"
      method: GET
      verify: !bool "{verify}"
    response:
      status_code: 200
      save:
        json:
          access_token: access_token

  # GET /Inventory/ComponentEndpoints retrieve ID
  - name: Retrieve a ComponentEndpoint ID for a Node to be used in later stages
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints?type=Node"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            mapping:
              ComponentEndpoints:
                type: seq
                matching: all
                required: True
                sequence:
                  - type: map
                    required: True
                    # only check for the ID that is needed for subsequent stages, the
                    # rest of the response body is verified by the non-disruptive tests
                    allowempty: True
                    mapping:
                      ID:
                        type: str
                        required: True
                        pattern: "x[0-9]+c[0-9]+s[0-9]+b[0-9]+n[0-9]+"
      save:
        json:
          id: ComponentEndpoints[0].ID

  # GET /Inventory/ComponentEndpoints/{id} existent ID
  - name: Ensure that we can conduct a query on a specific Node ID in the ComponentEndpoints collection
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints/{id}"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      verify_response_with:
        function: tavern.testutils.helpers:validate_pykwalify
        extra_kwargs:
          schema:
            type: map
            required: True
            # only check for the ID that is needed for subsequent stages, the
            # rest of the response body is verified by the non-disruptive tests
            allowempty: True
            mapping:
              ID:
                type: str
                required: True
                enum:
                  - "{id}"

  # DELETE /Inventory/ComponentEndpoints/{id} existent ID
  - name: Ensure that we can delete a ComponentEndpoint by ID
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints/{id}"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200
      json:
        code: 0
        message: "deleted 1 entry"

  # DELETE /Inventory/ComponentEndpoints/{id} non-existent ID
  - name: Ensure that the ComponentEndpoint is deleted
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints/{id}"
      method: GET
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      json:
        type: "about:blank"
        title: "Not Found"
        detail: "no such xname."
        status: 404

  # DELETE /Inventory/ComponentEndpoints all endpoints
  - name: Ensure that all ComponentEndpoints can be deleted
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 200

  # DELETE /Inventory/ComponentEndpoints all endpoints deleted
  - name: Ensure that all ComponentEndpoints are deleted
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 404
      json:
        type: "about:blank"
        title: "Not Found"
        detail: "no entries to delete"
        status: 404

  # DELETE /Inventory/ComponentEndpoints/{id} invalid ID
  - name: Attempt to delete a ComponentEndpoint with an invalid ID
    request:
      url: "{hsm_base_url}/hsm/v2/Inventory/ComponentEndpoints/FAKE"
      method: DELETE
      verify: !bool "{verify}"
      headers:
        Authorization: "Bearer {access_token}"
    response:
      status_code: 400
      json:
        type: "about:blank"
        title: "Bad Request"
        detail: "Argument was not a valid xname ID"
        status: 400

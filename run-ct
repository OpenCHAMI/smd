#!/usr/bin/env bash

# set -x
set -e

function usage {
    script_name=$(basename $0)
    echo "Usage:"
    echo "    ${script_name} -h"
    echo "    ${script_name} init start tests destructive-tests stop"
}


function log {
    echo "$@"
}

function download_deployment_recipes {
    tag="HEAD"
    if [ ! -f "${TAR_FILE}" ]; then
        # github rest endpoints https://docs.github.com/en/rest/repos/contents?apiVersion=2022-11-28#download-a-repository-archive-tar
        curl -L -s \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            --output ${TAR_FILE} \
            "https://api.github.com/repos/OpenCHAMI/deployment-recipes/tarball/HEAD"

        log "downloaded:" "${TAR_FILE}"
    else
        log "skipping download because the file exists:" "${TAR_FILE}"
    fi
}

function init_test_env {
    if [ ! -d ${working_dir}/deployment-recipes ]; then
        mkdir -p ${working_dir}/deployment-recipes
        tar -x \
            -f "${TAR_FILE}" \
            --strip-components=1 \
            -C ${working_dir}/deployment-recipes \
            "*/quickstart"

        log "extracted quickstart from deployment-recipes to ${working_dir}"
    fi

    if [ ! -f "${working_dir}/deployment-recipes/quickstart/.env" ]; then
        pushd "${working_dir}/deployment-recipes/quickstart"
        ./generate-configs.sh
        popd
    elif [ "$force" == "true" ]; then
        pushd "${working_dir}/deployment-recipes/quickstart"
        ./generate-configs.sh -f
        popd
    fi
}

function start_docker_compose_env {
    pushd "${working_dir}"
    docker compose \
        -f deployment-recipes/quickstart/base.yml \
        -f deployment-recipes/quickstart/postgres.yml \
        -f deployment-recipes/quickstart/jwt-security.yml \
        -f deployment-recipes/quickstart/haproxy-api-gateway.yml \
        -f deployment-recipes/quickstart/openchami-svcs.yml \
        -f deployment-recipes/quickstart/autocert.yml \
        -f deployment-recipes/quickstart/coredhcp.yml \
        -f deployment-recipes/quickstart/configurator.yml \
        -f docker-compose/computes.yml \
        up -d
    popd
}

function stop_docker_compose_env {
    pushd "${working_dir}/deployment-recipes/quickstart"
    docker compose \
        -f base.yml \
        -f postgres.yml \
        -f jwt-security.yml \
        -f haproxy-api-gateway.yml \
        -f openchami-svcs.yml \
        -f autocert.yml \
        -f coredhcp.yml \
        -f configurator.yml \
        -f ${test_dir}/docker-compose/computes.yml \
        down -v
    popd
}

# main

COMMANDS=""

if [ "$#" == 0 ]; then
    usage
    exit 0
fi

while (( "$#" )); do
    case "$1" in
        -h|--help)
            usage
            exit 1
            ;;
        -d|--working-directory)
            if [ -n "$2" ] && [ ${2:0:1} != "-" ]; then
                working_dir="$2/test_env"
                shift 2
            else
                usage
                echo ""
                echo "Error: Argument for $1 is missing" >&2
            fi
            ;;
        -f|--force)
            force="true"
            shift 1
            ;;
        -*|--*=) # unsupported options
            usage
            echo ""
            echo "Error: Unsupported option $1" >&2
            exit 1
            ;;
        *) # commands
            COMMANDS="$COMMANDS $1"
            shift
            ;;
    esac
done

COMMANDS=($COMMANDS) # convert space separated commands into an array

test_dir="$(dirname "$(readlink -f "$0")")/test"
if [ -z "$working_dir" ]; then
    working_dir="$(dirname "$(readlink -f "$0")")/test-env"
fi
if [ ! -d "${working_dir}" ]; then
    if [[ ! " ${COMMANDS[*]} " =~ [[:space:]]"init"[[:space:]] ]] &&
        [[ ! " ${COMMANDS[*]} " =~ [[:space:]]"clean"[[:space:]] ]]
    then
        log "missing directory: ${working_dir}"
        log "use the init command option to create ${working_dir}"
        exit 1
    fi
fi
log "working directory:" ${working_dir}
TAR_FILE="${working_dir}/src-deployment-recipes.tar.gz"

for command in "${COMMANDS[@]}"; do
    case "$command" in
        download)
            mkdir -p "${working_dir}"
            download_deployment_recipes
            ;;
        clean)
            if [ -d "${working_dir}" ]; then
                rm -r "${working_dir}/"
                log "removed ${working_dir}"
            fi
            ;;
        init)
            mkdir -p "${working_dir}"
            cp -r "${test_dir}/docker-compose" "${working_dir}/"
            download_deployment_recipes
            init_test_env
            ;;
        start)
            start_docker_compose_env
            ;;
        stop)
            stop_docker_compose_env
            ;;
        *) # commands
            echo "unknown command: $command"
            ;;
    esac
done
